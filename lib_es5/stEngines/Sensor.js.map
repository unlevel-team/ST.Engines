{"version":3,"sources":["stEngines/Sensor.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAeA,IAAI,eAAe,QAAQ,QAAR,EAAkB,YAArC;;;;;;AASA,IAAI,mBAAmB,QAAQ,mBAAR,EAA6B,gBAApD;;;;;;;AASA,IAAM,mBAAmB;;AAExB,WAAW;AACV,0BAAyB;AADf;AAFa,CAAzB;;;;;;;;;;;;;;;IAoBM,M;;;;;;;AAML,iBAAY,MAAZ,EAAoB;AAAA;;AAEnB,MAAI,UAAU,IAAd;;AAEA,UAAQ,OAAR,GAAkB,KAAlB;AACA,UAAQ,MAAR,GAAiB,MAAjB;AACA,UAAQ,SAAR,GAAoB,gBAApB;AACA,UAAQ,YAAR,GAAuB,IAAI,YAAJ,EAAvB;AACA,UAAQ,YAAR,GAAuB,IAAvB;AAEA;;;;;;;;;+BAMY;;AAEZ,OAAI,UAAU,IAAd;AACA,OAAI,UAAU,QAAQ,MAAtB;AACA,OAAI,iBAAiB,QAAQ,OAA7B;;AAGA,OAAI,QAAQ,OAAR,KAAoB,IAAxB,EAA8B;AAC7B,YAAQ,OAAR,GAAkB,IAAlB;AACA;;;AAGD,OAAI,QAAQ,OAAR,KAAoB,IAAxB,EAA8B;AAC7B;AACA;;;;AAID,OAAM,eAAe,eAAf,KAAmC,SAAnC,IACJ,eAAe,eAAf,KAAmC,IADhC,IAEF,eAAe,SAAf,KAA6B,SAFhC,EAE6C;;AAG5C,qBAAiB,sBAAjB,CAAwC,OAAxC;AAGA;;AAID;;;;;;;;;;+BAQY;;AAEZ,OAAI,UAAU,IAAd;AACA,OAAI,UAAU,QAAQ,MAAtB;AACA,OAAI,WAAW,QAAQ,OAAvB;;AAEA,OAAI,iBAAiB;AACpB,gBAAa,QAAQ,QADD;AAEpB,iBAAa,SAAS,SAFF;AAGpB,iBAAa,SAAS,SAHF;AAIpB,qBAAiB;AAJG,IAArB;;AAQA,OAAK,QAAQ,YAAR,KAAyB,IAA9B,EAAqC;;AAEnC,mBAAe,aAAf,GAA+B,QAAQ,YAAR,CAAqB,UAArB,EAA/B;AACD;;AAGD,UAAO,cAAP;AAEA;;;;;;;;;;6BAQU,O,EAAQ;;AAElB,OAAI,UAAU,IAAd;;AAEA,OAAI,QAAQ,YAAR,KAAyB,SAAzB,IACF,QAAQ,YAAR,CAAqB,KAArB,KAA+B,QAAQ,YAAR,CAAqB,SAArB,CAA+B,MAA/B,CAAsC,OADvE,EACgF;AAC/E,UAAM,mBAAN;AACA;;AAED,OAAI,QAAQ,QAAR,KAAqB,SAAzB,EAAoC;AACnC,YAAQ,MAAR,CAAe,QAAf,GAA0B,QAAQ,QAAlC;AACA;;AAED,OAAI,QAAQ,aAAR,KAA0B,SAA9B,EAAyC;;;;;;AAMvC,YAAQ,YAAR,CAAqB,UAArB,CAAgC;AAC/B,qBAAgB,QAAQ,YADO;AAE/B,mBAAc,QAAQ,aAFS;AAG/B,oBAAe;AAHgB,KAAhC;AAMD;;;AAGD,WAAQ,YAAR,CAAqB,IAArB,CAA0B,QAAQ,SAAR,CAAkB,MAAlB,CAAyB,oBAAnD,EAAyE,EAAC,UAAU,OAAX,EAAzE;AAEA;;;;;;AAOF,OAAO,OAAP,GAAiB,MAAjB","file":"stEngines/Sensor.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Actuator\r\n * \r\n * Generic object for a Sensor\r\n * \r\n */\r\n\r\n\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n\r\n\r\n/**\r\n * Import SensorEngine library\r\n * @ignore\r\n */\r\nlet SensorEngine_Lib = require('./SensorEngine.js').SensorEngine_Lib;\r\n\r\n\r\n\r\n/**\r\n * Sensor constants\r\n * \r\n * @memberof st.ngn\r\n */\r\nconst Sensor_CONSTANTS = {\r\n\t\r\n\t\"Events\" : {\r\n\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\"\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Sensor\r\n * \r\n * @class\r\n * @memberof st.ngn\r\n * \r\n * @property {boolean} enabled - Enabled flag.\r\n * @property {object} config - Configuration.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * @property {object} sensorEngine - Sensor engine.\r\n * \r\n */\r\nclass Sensor {\r\n\t\r\n\t/**\r\n\t * @constructs Sensor\r\n\t * @param {object} config Configuration object\r\n\t */\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tlet _sensor = this;\r\n\t\t\r\n\t\t_sensor.enabled = false;\r\n\t\t_sensor.config = config;\r\n\t\t_sensor.CONSTANTS = Sensor_CONSTANTS;\r\n\t\t_sensor.eventEmitter = new EventEmitter();\r\n\t\t_sensor.sensorEngine = null;\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize Sensor\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet _sensor = this;\r\n\t\tlet _config = _sensor.config;\r\n\t\tlet _configOptions = _config.options;\r\n\t\t\r\n\t\t\r\n\t\tif (_config.enabled === true) {\r\n\t\t\t_sensor.enabled = true;\r\n\t\t}\r\n\t\t\r\n\t\t// Only when is enabled\r\n\t\tif (_sensor.enabled !== true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ \\/ ~~~\r\n\t\t// Sensor Engine URL \r\n\t\tif ( (_configOptions.sensorEngineURL !== undefined && \r\n\t\t\t\t_configOptions.sensorEngineURL !== null) || \r\n\t\t\t\t(_configOptions.engineURI !== undefined) ) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSensorEngine_Lib.initialze_SensorEngine(_sensor);\r\n\t\t\t\r\n\t\t\t\r\n\t\t} \r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ /\\ ~~~\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get sensor options\r\n\t * \r\n\t * @returns {object} Sensor options\r\n\t */\r\n\tgetOptions() {\r\n\t\t\r\n\t\tlet _sensor = this;\r\n\t\tlet _config = _sensor.config;\r\n\t\tlet _options = _config.options;\r\n\t\t\r\n\t\tlet _sensorOptions = {\r\n\t\t\t\"loopTime\" : _config.loopTime,\r\n\t\t\t\"engineURI\": _options.engineURI,\r\n\t\t\t\"engineURL\": _options.engineURL,\r\n\t\t\t'engineOptions': null\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tif ( _sensor.sensorEngine !== null ) {\r\n\t\t\t// Get engine options in synchro mode...\r\n\t\t\t _sensorOptions.engineOptions = _sensor.sensorEngine.getOptions();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn _sensorOptions;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set sensor options\r\n\t * \r\n\t * @param {object} options - Options object\r\n\t */\r\n\tsetOptions(options){\r\n\t\t\r\n\t\tlet _sensor = this;\r\n\t\t\r\n\t\tif (_sensor.sensorEngine !== undefined && \r\n\t\t\t\t_sensor.sensorEngine.state === _sensor.sensorEngine.CONSTANTS.States.Working) {\r\n\t\t\tthrow \"Bad sensor state.\";\r\n\t\t}\r\n\t\t\r\n\t\tif (options.loopTime !== undefined) {\r\n\t\t\t_sensor.config.loopTime = options.loopTime;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.engineOptions !== undefined) {\r\n\t\t\t\r\n\t\t\t// Set engine options in synchro mode...\r\n\t\t\t\r\n\t\t\t//_sensor.sensorEngine.setOptions(options.engineOptions);\r\n\t\t\t \r\n\t\t\t _sensor.sensorEngine.setOptions({\r\n\t\t\t\t 'ngnInterface': _sensor.sensorEngine,\r\n\t\t\t\t 'ngnOptions': options.engineOptions,\r\n\t\t\t\t 'bngnOptions': options\r\n\t\t\t });\r\n\t\t\t \r\n\t\t}\r\n\t\t\r\n\t\t// Emit event 'SensorOptionsUpdated'\r\n\t\t_sensor.eventEmitter.emit(_sensor.CONSTANTS.Events.SensorOptionsUpdated, {\"sensor\": _sensor});\r\n\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\nmodule.exports = Sensor;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}