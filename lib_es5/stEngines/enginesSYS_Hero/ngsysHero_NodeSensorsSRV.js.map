{"version":3,"sources":["stEngines/enginesSYS_Hero/ngsysHero_NodeSensorsSRV.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/ngsysHero_NodeSensorsSRV.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Sensors services\r\n * for Node role\r\n * \r\n * SomeThings Engines System library\r\n * version Hero\r\n * \r\n */\r\n\r\n/**\r\n * Import SensorsServices\r\n * @ignore\r\n */\r\nlet SensorsServices = require('../services/SensorsServices.js').SensorsServices;\r\n\r\n\r\n/**\r\n * Sensors Services\r\n * <pre>\r\n * for role Node\r\n * \r\n * version Hero\r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero\r\n * @implements SensorsServices\r\n * \r\n */\r\nclass NGSYS_Hero_Node_SensorsSRV extends SensorsServices {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs NGSYS_Hero_Node_SensorsSRV\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t * @param {object} controlChannel - Control chnnel object\r\n\t * \r\n\t */\r\n\tconstructor(sensorsManager, controlChannel) {\r\n\t\t\r\n\t\tsuper(sensorsManager, controlChannel);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t */\r\n\t_mapControlEvents(sensorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (sensorsManager === undefined) {\r\n\t\t\tsensorsManager = service.sensorsManager;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsensorsManager.sensorsList.forEach(function(sensor, _i) {\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tservice._mapSensorControlEvents(sensor);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tthrow \"Error mapping sensor control events. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events for sensors\r\n\t * \r\n\t * @param {st.ngn.Sensor} sensor \r\n\t */\r\n\t_mapSensorControlEvents(sensor) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet sensorEngine = sensor.sensorEngine;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node._mapSensorControlEvents');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(sensor);\r\n\t\t\r\n\t\t\r\n\t\tsensor.eventEmitter.on(sensor.CONSTANTS.Events.SensorOptionsUpdated, \r\n\t\t\t\t\r\n\t\t\t\tfunction(data) {\r\n\t\t\t\t\tservice._event_SensorOptionsUpdated( data,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t);\r\n\t\t\r\n\t\t\r\n\t\tif (sensorEngine !== null) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Map event SensorEngine_Start\r\n\t\t\tsensorEngine.eventEmitter.on(\r\n\t\t\t\t\tsensorEngine.CONSTANTS.Events.SensorEngine_Start, \r\n\t\t\t\t\tfunction(data){\r\n\t\t\t\t\t\tservice._event_SensorEngine_Start({\r\n\t\t\t\t\t\t\t\"data\": data,\r\n\t\t\t\t\t\t\t\"sensor\": sensor\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// Map event SensorEngine_Stop\r\n\t\t\tsensorEngine.eventEmitter.on(\r\n\t\t\t\t\tsensorEngine.CONSTANTS.Events.SensorEngine_Stop, \r\n\t\t\t\t\tfunction(data){\r\n\t\t\t\t\t\tservice._event_SensorEngine_Stop({\r\n\t\t\t\t\t\t\t\"data\": data,\r\n\t\t\t\t\t\t\t\"sensor\": sensor\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Node_SensorsSRV} [options.service] - Sensors Service object\r\n\t * \r\n\t */\r\n\t_mapControlMessages(socket, options) {\r\n\t\t\r\n\t\tsuper._mapControlMessages(socket, options);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\r\n\t\t\r\n\t\t// Map message getSensorsList\r\n\t\tsocket.on(service.CONSTANTS.Messages.getSensorsList, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_getSensorsList(msg, {\r\n\t\t\t\t\t\"service\": service\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message getSensorOptions\r\n\t\tsocket.on(service.CONSTANTS.Messages.getSensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_getSensorOptions(msg, service);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message setSensorOptions\r\n\t\tsocket.on(service.CONSTANTS.Messages.setSensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_setSensorOptions(msg, service);\r\n\t\t\t}\t\r\n\t\t);\r\n\t\t\r\n\t\t// Map message StartSensor\r\n\t\tsocket.on(service.CONSTANTS.Messages.StartSensor, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_StartSensor(msg, service);\r\n\t\t\t}\t\t\r\n\t\t);\r\n\t\t\r\n\t\t// Map message StopSensor\r\n\t\tsocket.on(service.CONSTANTS.Messages.StopSensor, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_StopSensor(msg, service);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message TurnOffSensors\r\n\t\tsocket.on(service.CONSTANTS.Messages.TurnOffSensors, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_TurnOffSensors(msg, service);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Node_SensorsSRV} [options.service] - Sensors Service object\r\n\t * \r\n\t */\r\n\t_unmapControlMessages(socket, options) {\r\n\t\t\r\n\t\tsuper._unmapControlMessages(socket, options);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.getSensorsList, service._msg_getSensorsList);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.getSensorOptions, service._msg_getSensorOptions);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.setSensorOptions, service._msg_setSensorOptions);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.StartSensor, service._msg_StartSensor);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.StopSensor, service._msg_StopSensor);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.TurnOffSensors, service._msg_TurnOffSensors);\r\n\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.getSensorsList);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.getSensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.setSensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.StartSensor);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.StopSensor);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.TurnOffSensors);\r\n\t\t\r\n\t\tservice._mapped = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event SensorOptionsUpdated\r\n\t */\r\n\t_event_SensorOptionsUpdated(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorOptionsUpdated\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorOptionsUpdated, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event SensorEngine_Start\r\n\t */\r\n\t_event_SensorEngine_Start(data) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\t\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorStarted\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorStarted, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event SensorEngine_Stop\r\n\t */\r\n\t_event_SensorEngine_Stop(data) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\t\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorStarted\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorStopped, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getSensorsList\r\n\t */\r\n\t_msg_getSensorsList(msg, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\tlet _socket = _service.controlChannel.socket;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t  \r\n\t\tlet _response = {};\r\n\t\t_response.numSensors = _smng.sensorsList.length;\r\n\t\t_response.sensors = [];\r\n\t  \r\n\t\t// Only for enabled\r\n\t\tlet _sensorsEnabled = _smng.sensorsList.filter(function(_sensor, _i) {\r\n\t\t\t\r\n\t\t\tif (_sensor.enabled === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\n\t\t\treturn false;\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t_sensorsEnabled.forEach(function(_sns, _i) {\r\n\t  \t\r\n\t\t\tlet _sensor = {\r\n\t\t\t\t\"sensorID\" : _sns.config.id,\r\n\t\t\t\t\"type\" : _sns.config.type,\r\n\t\t\t\t\"engine\": \"not defined\",\r\n\t\t\t\t\"state\" : \"config\"\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (_sns.sensorEngine !== null) {\r\n\t\t\t\tif (_sns.sensorEngine.name !== undefined) {\r\n\t\t\t\t\t_sensor.engine = _sns.sensorEngine.name;\r\n\t\t\t\t}\r\n\t\t\t\t_sensor.state = _sns.sensorEngine.state;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_response.sensors.push( _sensor );\r\n\t\t\t\r\n\t\t});\r\n\t  \r\n\t  \r\n\t\t// Emit message SensorsList\r\n\t\t_socket.emit( _service.CONSTANTS.Messages.SensorsList, _response );\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getSensorOptions\r\n\t */\r\n\t_msg_getSensorOptions(msg, service) {\r\n\t\t\r\n\t\tif (service === undefined) {\r\n\t\t\tservice = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\t  \r\n\t\tlet sensorID = msg.sensorID;\r\n\t\t  \r\n\t\tlet response = {\r\n\t\t  \"sensorID\" : sensorID\r\n\t\t};\r\n\t\t  \r\n\t\ttry {\r\n\t\t\t  \r\n\t\t\tlet sensorSearch = smng.getSensorByID(sensorID);\r\n\t\t\tif(sensorSearch.STsensor === null){\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet sensor = sensorSearch.STsensor;\r\n\t\t\t  \r\n\t\t\tresponse.options = sensor.getOptions();\r\n\t\t\t  \r\n\t\t\t// Emit message SensorOptions\r\n\t\t\tsocket.emit(service.CONSTANTS.Messages.SensorOptions, response);\r\n\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message setSensorOptions\r\n\t */\r\n\t_msg_setSensorOptions(msg, service) {\r\n\t\t\r\n\t\tif (service === undefined) {\r\n\t\t\tservice = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.setSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LO\r\n\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet options = msg.options;\r\n\t\t  \r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\" : sensorID\r\n\t\t};\r\n\t\t  \r\n\t\ttry {\r\n\t\t \r\n\t\t\tlet sensorSearch = smng.getSensorByID(sensorID);\r\n\t\t\tif(sensorSearch.STsensor === null){\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet sensor = sensorSearch.STsensor;\r\n\t\t\t\r\n\t\t\tsensor.setOptions(options);\r\n\t\t\t  \r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.setSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StartSensor\r\n\t */\r\n\t_msg_StartSensor(msg, service) {\r\n\t\t\r\n\t\tif (service === undefined) {\r\n\t\t\tservice = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.StartSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\t  console.log(' <~> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {};\r\n\t\tresponse.result = null;\r\n\t  \r\n\t\ttry {\r\n\t\t\r\n\t\t\tlet _sensorSearch = smng.getSensorByID(msg.sensorID);\r\n\t\t  \r\n\t\t\tif (_sensorSearch.STsensor !== null) {\r\n\t\t\t\t_sensorSearch.STsensor.sensorEngine.startEngine();\r\n\t\t\t\tresponse.result = \"OK\";\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Not found!!!\");\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\tthrow \"Sensor not found.\";  \r\n\t\t\t}\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\t\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.StartSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n//\t\t\tmsg.result = response.result;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StopSensor\r\n\t */\r\n\t_msg_StopSensor(msg, service) {\r\n\t\t\r\n\t\tif (service === undefined) {\r\n\t\t\tservice = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.StopSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\tconsole.log(' <~> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t  \r\n\t\tlet response = {};\r\n\t\tresponse.result = null;\r\n\t\t  \r\n\t\ttry {\r\n\t\t\t\r\n\t\t  let _sensorSearch = smng.getSensorByID(msg.sensorID);\r\n\t\t\t  \r\n\t\t  if (_sensorSearch.STsensor !== null) {\r\n\t\t\t  _sensorSearch.STsensor.sensorEngine.stopEngine();\r\n\t\t\t  response.result = \"OK\";\r\n\t\t  } else {\r\n\t\t\tthrow \"Sensor not found.\";  \r\n\t\t  }\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.StopSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message TurnOffSensors\r\n\t */\r\n\t_msg_TurnOffSensors(msg, service) {\r\n\t\t\r\n\t\tif (service === undefined) {\r\n\t\t\tservice = this;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.TurnOffSensors');\t// TODO REMOVE DEBUG LOG\r\n\t  \r\n\t\tlet response = {};\r\n\t\tresponse.result = null;\r\n\t  \r\n\t\ttry {\r\n\t\t\r\n\t\t\tsmng.turnOffSensors();\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.TurnOffSensors ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\nlet _Lib = {\r\n\t\"NGSYS_Hero_Node_SensorsSRV\" : NGSYS_Hero_Node_SensorsSRV\r\n};\r\n\r\n\r\nmodule.exports = _Lib;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}