{"version":3,"sources":["stEngines/enginesSYS_Hero/ngsysHero_NodeSensorsSRV.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/ngsysHero_NodeSensorsSRV.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Sensors services\r\n * for Node role\r\n * \r\n * SomeThings Engines System library\r\n * version Hero\r\n * \r\n */\r\n\r\n/**\r\n * Import SensorsServices\r\n * @ignore\r\n */\r\nlet SensorsServices = require('../services/SensorsServices.js').SensorsServices;\r\n\r\n\r\n/**\r\n * Sensors Services\r\n * <pre>\r\n * for role Node\r\n * \r\n * version Hero\r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero\r\n * @implements SensorsServices\r\n * \r\n */\r\nclass NGSYS_Hero_Node_SensorsSRV extends SensorsServices {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs NGSYS_Hero_Node_SensorsSRV\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t * @param {object} controlChannel - Control chnnel object\r\n\t * \r\n\t */\r\n\tconstructor(sensorsManager, controlChannel) {\r\n\t\t\r\n\t\tsuper(sensorsManager, controlChannel);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t */\r\n\t_mapControlEvents(sensorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (sensorsManager === undefined) {\r\n\t\t\tsensorsManager = service.sensorsManager;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsensorsManager.sensorsList.forEach(function(sensor, _i) {\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tservice._mapSensorControlEvents(sensor);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\tthrow \"Error mapping sensor control events. \" + e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events for sensors\r\n\t * \r\n\t * @param {st.ngn.Sensor} sensor \r\n\t */\r\n\t_mapSensorControlEvents(sensor) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet sensorEngine = sensor.sensorEngine;\r\n\t\t\r\n\t\t// console.log('<*> NGSYS_Hero_Node._mapSensorControlEvents');\t// TODO REMOVE DEBUG LOG\r\n\t\t// console.log(sensor.config);\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\t\r\n\t\tsensor.eventEmitter.on(sensor.CONSTANTS.Events.SensorOptionsUpdated, \r\n\t\t\t\t\r\n\t\t\t\tfunction(data) {\r\n\t\t\t\t\tservice._event_SensorOptionsUpdated( data,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t);\r\n\t\t\r\n\t\t\r\n\t\tif (sensorEngine !== null) {\r\n\t\t\t\r\n\t\t\t// Map event Engine_Start\r\n\t\t\tsensorEngine.eventEmitter.on(\r\n\t\t\t\t\tsensorEngine.CONSTANTS.Events.Engine_Start, \r\n\t\t\t\t\tfunction(data){\r\n\t\t\t\t\t\tservice._event_Engine_Start({\r\n\t\t\t\t\t\t\t\"data\": data,\r\n\t\t\t\t\t\t\t\"sensor\": sensor\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// Map event Engine_Stop\r\n\t\t\tsensorEngine.eventEmitter.on(\r\n\t\t\t\t\tsensorEngine.CONSTANTS.Events.Engine_Stop, \r\n\t\t\t\t\tfunction(data){\r\n\t\t\t\t\t\tservice._event_Engine_Stop({\r\n\t\t\t\t\t\t\t\"data\": data,\r\n\t\t\t\t\t\t\t\"sensor\": sensor\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Node_SensorsSRV} [options.service] - Sensors Service object\r\n\t * \r\n\t */\r\n\t_mapControlMessages(socket, options) {\r\n\t\t\r\n\t\tsuper._mapControlMessages(socket, options);\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\t\r\n\t\t\r\n\t\t// Map message getSensorsList\r\n\t\tsocket.on(_service.CONSTANTS.Messages.getSensorsList, \r\n\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_getSensorsList({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message getSensorOptions\r\n\t\tsocket.on(_service.CONSTANTS.Messages.getSensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_getSensorOptions({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message setSensorOptions\r\n\t\tsocket.on(_service.CONSTANTS.Messages.setSensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_setSensorOptions({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\t\r\n\t\t);\r\n\t\t\r\n\t\t// Map message StartSensor\r\n\t\tsocket.on(_service.CONSTANTS.Messages.StartSensor, \r\n\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_StartSensor({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\t\t\r\n\t\t);\r\n\t\t\r\n\t\t// Map message StopSensor\r\n\t\tsocket.on(_service.CONSTANTS.Messages.StopSensor, \r\n\t\t\t\t\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_StopSensor({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message TurnOffSensors\r\n\t\tsocket.on(_service.CONSTANTS.Messages.TurnOffSensors, \r\n\t\t\t\t\r\n\t\t\tfunction(_msg) {\r\n\t\t\t\t_service._msg_TurnOffSensors({\r\n\t\t\t\t\t'msg': _msg,\r\n\t\t\t\t\t'service': _service\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Node_SensorsSRV} [options.service] - Sensors Service object\r\n\t * \r\n\t */\r\n\t_unmapControlMessages(socket, options) {\r\n\t\t\r\n\t\tsuper._unmapControlMessages(socket, options);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.getSensorsList, service._msg_getSensorsList);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.getSensorOptions, service._msg_getSensorOptions);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.setSensorOptions, service._msg_setSensorOptions);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.StartSensor, service._msg_StartSensor);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.StopSensor, service._msg_StopSensor);\r\n//\t\tsocket.removeListener(service.CONSTANTS.Messages.TurnOffSensors, service._msg_TurnOffSensors);\r\n\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.getSensorsList);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.getSensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.setSensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.StartSensor);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.StopSensor);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.TurnOffSensors);\r\n\t\t\r\n\t\tservice._mapped = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event SensorOptionsUpdated\r\n\t */\r\n\t_event_SensorOptionsUpdated(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorOptionsUpdated\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorOptionsUpdated, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event Engine_Start\r\n\t */\r\n\t_event_Engine_Start(data) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\t\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorStarted\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorStarted, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event Engine_Stop\r\n\t */\r\n\t_event_Engine_Stop(data) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = service.controlChannel.socket;\r\n\t\t\r\n\t\tlet sensor = data.sensor;\r\n\t\t\r\n\t\t// Emit message SensorStarted\r\n\t\tsocket.emit(service.CONSTANTS.Messages.SensorStopped, {\r\n\t\t\t\"sensorID\": sensor.config.id\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getSensorsList\r\n\t */\r\n\t_msg_getSensorsList(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\tlet _socket = _service.controlChannel.socket;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t  \r\n\t\tlet _response = {};\r\n\t\t_response.numSensors = _smng.sensorsList.length;\r\n\t\t_response.sensors = [];\r\n\t  \r\n\t\t// Only for enabled\r\n\t\tlet _sensorsEnabled = _smng.sensorsList.filter(function(_sensor, _i) {\r\n\t\t\t\r\n\t\t\tif (_sensor.enabled === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\n\t\t\treturn false;\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t_sensorsEnabled.forEach(function(_sns, _i) {\r\n\t  \t\r\n\t\t\tlet _sensor = {\r\n\t\t\t\t\"sensorID\" : _sns.config.id,\r\n\t\t\t\t\"type\" : _sns.config.type,\r\n\t\t\t\t\"engine\": \"not defined\",\r\n\t\t\t\t\"state\" : \"config\"\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (_sns.sensorEngine !== null) {\r\n\t\t\t\tif (_sns.sensorEngine.name !== undefined) {\r\n\t\t\t\t\t_sensor.engine = _sns.sensorEngine.name;\r\n\t\t\t\t}\r\n\t\t\t\t_sensor.state = _sns.sensorEngine.state;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_response.sensors.push( _sensor );\r\n\t\t\t\r\n\t\t});\r\n\t  \r\n\t  \r\n\t\t// Emit message SensorsList\r\n\t\t_socket.emit( _service.CONSTANTS.Messages.SensorsList, _response );\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message getSensorOptions\r\n\t */\r\n\t_msg_getSensorOptions(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\t\t\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\tlet _socket = _service.controlChannel.socket;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\t  \r\n\t\tlet _sensorID = _msg.sensorID;\r\n\t\t  \r\n\t\tlet _response = {\r\n\t\t  \"sensorID\" : _sensorID\r\n\t\t};\r\n\t\t  \r\n\t\ttry {\r\n\t\t\t  \r\n\t\t\tlet _sensorSearch = _smng.getSensorByID(_sensorID);\r\n\t\t\tif(_sensorSearch.STsensor === null){\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet _sensor = _sensorSearch.STsensor;\r\n\t\t\t\r\n\t\t\t_response.options = _sensor.getOptions();\r\n\t\t\t\r\n\t\t\t// Emit message SensorOptions\r\n\t\t\t_socket.emit(_service.CONSTANTS.Messages.SensorOptions, _response);\r\n\r\n\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t_response.result = \"ERROR\";\r\n\t\t\t_response.error = _e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.getSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message setSensorOptions\r\n\t */\r\n\t_msg_setSensorOptions(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.setSensorOptions');\t// TODO REMOVE DEBUG LO\r\n\t\tconsole.log(_msg);\t// TODO REMOVE DEBUG LO\r\n\r\n\t\tlet _sensorID = _msg.sensorID;\r\n\t\tlet _options = _msg.options;\r\n\t\t  \r\n\t\tlet _response = {\r\n\t\t\t\"sensorID\" : _sensorID\r\n\t\t};\r\n\t\t  \r\n\t\ttry {\r\n\t\t \r\n\t\t\tlet _sensorSearch = _smng.getSensorByID(_sensorID);\r\n\t\t\tif(_sensorSearch.STsensor === null){\r\n\t\t\t\tthrow \"Sensor not found.\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet _sensor = _sensorSearch.STsensor;\r\n\t\t\t\r\n\t\t\t_sensor.setOptions(_options);\r\n\t\t\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t_response.result = \"ERROR\";\r\n\t\t\t_response.error = _e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.setSensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StartSensor\r\n\t */\r\n\t_msg_StartSensor(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.StartSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(_msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\t  console.log(' <~> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet _response = {};\r\n\t\t_response.result = null;\r\n\t  \r\n\t\ttry {\r\n\t\t\r\n\t\t\tlet _sensorSearch = _smng.getSensorByID(_msg.sensorID);\r\n\t\t  \r\n\t\t\tif (_sensorSearch.STsensor !== null) {\r\n\t\t\t\t\r\n\t\t\t\t _sensorSearch.STsensor.sensorEngine.startEngine({\r\n\t\t\t\t\t 'ngnInterface': _sensorSearch.STsensor.sensorEngine\r\n\t\t\t\t });\r\n\t\t\t\t \r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Not found!!!\");\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\tthrow \"Sensor not found.\";  \r\n\t\t\t}\r\n\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t_response.result = \"ERROR\";\r\n\t\t\t_response.error = _e;\r\n;\r\n\t\t\t\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.StartSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n//\t\t\tmsg.result = response.result;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message StopSensor\r\n\t */\r\n\t_msg_StopSensor(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.StopSensor');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(_msg);\t// TODO REMOVE DEBUG LOG\r\n//\t\tconsole.log(' <~> ' + msg);\t// TODO REMOVE DEBUG LOG\r\n\t\t  \r\n\t\tlet _response = {};\r\n\t\t_response.result = null;\r\n\t\t  \r\n\t\ttry {\r\n\t\t\t\r\n\t\t  let _sensorSearch = _smng.getSensorByID(_msg.sensorID);\r\n\t\t\t  \r\n\t\t  if (_sensorSearch.STsensor !== null) {\r\n\t\t\t  \r\n\t\t\t  _sensorSearch.STsensor.sensorEngine.stopEngine({\r\n\t\t\t\t  'ngnInterface': _sensorSearch.STsensor.sensorEngine\r\n\t\t\t  });\r\n\t\t\t  \r\n\t\t  } else {\r\n\t\t\tthrow \"Sensor not found.\";  \r\n\t\t  }\r\n\t\t  \r\n\t\t} catch (_e) {\r\n\t\t\t\r\n\t\t\t// TODO: handle exception\r\n\t\t\t_response.result = \"ERROR\";\r\n\t\t\t_response.error = _e;\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.StopSensor ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message TurnOffSensors\r\n\t */\r\n\t_msg_TurnOffSensors(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service  = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet _msg = options.msg;\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Node_SensorsSRV.Messages.TurnOffSensors');\t// TODO REMOVE DEBUG LOG\r\n\t  \r\n\t\tlet _response = {};\r\n\t\t_response.result = null;\r\n\t  \r\n\t\ttry {\r\n\t\t\r\n\t\t\t_smng.turnOffSensors();\r\n\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t_response.result = \"ERROR\";\r\n\t\t\t_response.error = _e;\r\n\r\n\t\t\tconsole.log('<EEE> NGSYS_Hero_Node_SensorsSRV.Messages.TurnOffSensors ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\nlet _Lib = {\r\n\t\"NGSYS_Hero_Node_SensorsSRV\" : NGSYS_Hero_Node_SensorsSRV\r\n};\r\n\r\n\r\nmodule.exports = _Lib;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}