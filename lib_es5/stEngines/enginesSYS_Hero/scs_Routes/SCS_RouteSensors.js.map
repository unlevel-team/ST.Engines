{"version":3,"sources":["stEngines/enginesSYS_Hero/scs_Routes/SCS_RouteSensors.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/scs_Routes/SCS_RouteSensors.js","sourcesContent":["\"use strict\";\r\n\r\n\r\n/**\r\n * import express\r\n * @ignore\r\n */\r\nlet express = require('express');\r\n\r\n/**\r\n * import bodyParser\r\n * @ignore\r\n */\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n/**\r\n * SCS Response default\r\n * \r\n * @typedef {Object} SCS_Response_Default\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteSensors\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Sensors'\r\n * @property {string} action - 'Default'\r\n * @property {number} messagesReceived - Number of messages received\r\n * \r\n */\r\n\r\n\r\n/**\r\n * SCS Response list\r\n * <pre>\r\n * mapped to '/list/'\r\n * </pre>\r\n * \r\n * @typedef {Object} SCS_Response_List\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteSensors\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Sensors'\r\n * @property {string} action - 'List'\r\n * @property {number} numberOfSensors - The number of sensors\r\n * @property {Object[]} sensors - Sensors list\r\n * @property {string} sensors[].sensorID - Sensor ID\r\n * @property {string} sensors[].type - Sensor type\r\n * @property {string} sensors[]._sysID - Sensor sysID\r\n * @property {string} sensors[].engine - Engine name. Could be 'not defined'\r\n * @property {string} sensors[].state - Engine state.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * SCS Response info\r\n * <pre>\r\n * mapped to '/:sensorID/info'\r\n * </pre>\r\n * \r\n * @typedef {Object} SCS_Response_Info\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteSensors\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Sensors'\r\n * @property {string} action - 'Info'\r\n * @property {string} sensorID - Sensor ID\r\n * @property {Object} sensor - Sensor data\r\n * @property {string} sensor.sensorID - Sensor ID\r\n * @property {string} sensor.type - Sensor type\r\n * @property {string} sensor._sysID - Sensor sysID\r\n * @property {string} sensor.engine - Engine name. Could be 'not defined'\r\n * @property {string} sensor.state - Engine state.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * SCS Response sensor options\r\n * <pre>\r\n * mapped to '/:sensorID/options'\r\n * </pre>\r\n * \r\n * @typedef {Object} SCS_Response_Options\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteSensors\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Sensors'\r\n * @property {string} action - 'Get Options of Sensor'\r\n * @property {string} sensorID - 'The Sensor ID'\r\n * @property {Object[]} options - 'Sensor options'\r\n * \r\n * \r\n * @property {number} numberOfSensors - The number of sensors\r\n * @property {Object[]} sensors - Sensors list\r\n * @property {string} sensors[].sensorID - Sensor ID\r\n * @property {string} sensors[].type - Sensor type\r\n * @property {string} sensors[]._sysID - Sensor sysID\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Routes for Sensors\r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes\r\n * \r\n * @property {object} expressRoute - Express route object\r\n * @property {number} messages - Messages counter\r\n * @property {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n */\r\nclass SCS_RouteSensors {\r\n\r\n\t/**\r\n\t * @constructs SCS_RouteSensors\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t */\r\n\tconstructor(sensorsManager) {\r\n\t\t\r\n\t\tlet _scsRouteSensors = this;\r\n\t\t\r\n\t\t_scsRouteSensors.expressRoute = null;\r\n\t\t_scsRouteSensors.messages = 0;\r\n\t\t_scsRouteSensors.sensorsManager = sensorsManager;\r\n\t\t\r\n\t\t_scsRouteSensors.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map service routes\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerSensors = this;\r\n\t\trouterSensors.expressRoute = express.Router();\r\n\t\t\r\n\t\t// create application/json parser \r\n\t\tlet jsonParser = bodyParser.json();\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\trouterSensors.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerSensors.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterSensors.expressRoute.get('/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterSensors._route_Default(req, res, {\r\n\t\t\t\t\"scsRouteSensors\": routerSensors\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of Sensors\r\n\t\trouterSensors.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterSensors._route_List(req, res, {\r\n\t\t\t\t\"scsRouteSensors\": routerSensors\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Get Sensor information\r\n\t\trouterSensors.expressRoute.get('/:sensorID/info', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterSensors._route_Info(req, res, {\r\n\t\t\t\t\"scsRouteSensors\": routerSensors,\r\n\t\t\t\t\"sensorID\": req.params.sensorID\r\n\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Get Sensor options\r\n\t\trouterSensors.expressRoute.get('/:sensorID/options', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Get Sensor Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Get Options of Sensor\",\r\n\t\t\t\t\t\"sensorID\": sensorID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor === null ) {\r\n\t\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stSensor = sensorSearch.stSensor;\r\n\t\t\t\t\r\n\t\t\t\t_response.options = stSensor.options;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Set Sensor options\r\n\t\trouterSensors.expressRoute.post('/:sensorID/options', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Set Sensor Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet options = req.body.options;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Set Options of Sensor\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor === null ) {\r\n\t\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stSensor = sensorSearch.stSensor;\r\n\t\t\t\t\r\n\t\t\t\tstSensor.setOptions(options);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\r\n\t\t\r\n\t\t\r\n\t\t// Start Sensor\r\n\t\trouterSensors.expressRoute.get('/:sensorID/start', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensor Start' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Start\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor !== null ) {\r\n\t\t\t\t\tsensorSearch.stSensor.start().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Sensor Started' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\tconsole.log( reason );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Sensor Start problem...' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Sensor not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Stop Sensor\r\n\t\trouterSensors.expressRoute.get('/:sensorID/stop', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensor Stop' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet sensorID = req.params.sensorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Stop\",\r\n\t\t\t\t\t\"sensorID\": sensorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet sensorSearch = smngr.getSensorBy_sysID(sensorID);\r\n\t\t\t\tif (sensorSearch.stSensor !== null ) {\r\n\t\t\t\t\tsensorSearch.stSensor.stop().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Sensor Stopped' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\tconsole.log( reason );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Sensor Stop problem...' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Sensor not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Turn off Sensors of Node\r\n\t\trouterSensors.expressRoute.get('/:nodeID/turnOffSensors', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Sensors turnOffSensors' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet smngr = routerSensors.sensorsManager;\r\n\t\t\tlet nodeID = req.params.nodeID;\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\t\t\"action\" : \"Turn off sensors\",\r\n\t\t\t\t\t\"sensorID\": nodeID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tsmngr.turnOffSensorsOfNode(nodeID);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns sensor data\r\n\t * @private\r\n\t */\r\n\t_getSensorData(_sns) {\r\n\t\tlet _sensorData = {\r\n\t\t\t\t\"sensorID\" : _sns.config.sensorID,\r\n\t\t\t\t\"type\": _sns.config.type,\r\n\t\t\t\t\"_sysID\": _sns.config._sysID,\r\n\t\t\t\t\"engine\": \"not defined\",\r\n\t\t\t\t\"state\": \"not defined\"\r\n\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tif (_sns.sensorEngine !== null) {\r\n\t\t\tif (_sns.sensorEngine.name !== undefined) {\r\n\t\t\t\t_sensorData.engine = _sns.sensorEngine.name;\r\n\t\t\t}\r\n\t\t\t_sensorData.state = _sns.sensorEngine.state;\r\n\t\t}\r\n\t\t\r\n\t\treturn _sensorData;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for default action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t * \r\n\t */\r\n\t_route_Default(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteSensors = this;\r\n\t\tif (options.scsRouteSensors !== undefined) {\r\n\t\t\t_SCS_RouteSensors = options.scsRouteSensors;\r\n\t\t}\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\"action\" : \"Default\",\r\n\t\t\t\"messagesReceived\" : _SCS_RouteSensors.messages\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for list action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t */\r\n\t_route_List(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteSensors = this;\r\n\t\tif (options.scsRouteSensors !== undefined) {\r\n\t\t\t_SCS_RouteSensors = options.scsRouteSensors;\r\n\t\t}\r\n\t\t\r\n\t\tlet _smngr = _SCS_RouteSensors.sensorsManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\"action\" : \"List\",\r\n\t\t\t\"numberOfSensors\": 0,\r\n\t\t\t\"sensors\" : []\r\n\t\t};\r\n\t\t\t\r\n\t\t_smngr.sensorsList.forEach(function(_sns, _i) {\r\n\t\t\t\r\n\t\t\tlet _sensorData = _SCS_RouteSensors._getSensorData(_sns);\r\n\t\t\t_response.sensors.push(_sensorData);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t_response.numberOfSensors = _smngr.sensorsList.length;\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for info action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t */\r\n\t_route_Info(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteSensors = this;\r\n\t\tif (options.scsRouteSensors !== undefined) {\r\n\t\t\t_SCS_RouteSensors = options.scsRouteSensors;\r\n\t\t}\r\n\t\t\r\n\t\tlet _smngr = _SCS_RouteSensors.sensorsManager;\r\n\t\tlet _sensorID = options.sensorID;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Sensors\",\r\n\t\t\t\"action\" : \"Info\",\r\n\t\t\t\"sensorID\" : _sensorID,\r\n\t\t\t\"sensor\": {}\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet sensorSearch = _smngr.getSensorBy_sysID(_sensorID);\r\n\t\t\tif (sensorSearch.stSensor !== null ) {\r\n\t\t\t\t\r\n\t\t\t\tlet _sns = sensorSearch.stSensor;\r\n\t\t\t\t_response.sensor = _SCS_RouteSensors._getSensorData(_sns);\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t_response.response = 'Sensor not found.';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t\r\n\t\t\t_response.response = 'Something happends...';\r\n\t\t\t_response.error = e;\r\n\t\t}\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t}\r\n\t\r\n}\r\n\r\nmodule.exports = SCS_RouteSensors;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}