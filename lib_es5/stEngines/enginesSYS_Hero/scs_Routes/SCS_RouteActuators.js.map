{"version":3,"sources":["stEngines/enginesSYS_Hero/scs_Routes/SCS_RouteActuators.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/scs_Routes/SCS_RouteActuators.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * import express\r\n * @ignore\r\n */\r\nlet express = require('express');\r\n\r\n/**\r\n * import bodyParser\r\n * @ignore\r\n */\r\nlet bodyParser = require('body-parser');\r\n\r\n\r\n/**\r\n * SCS Response default\r\n * \r\n * @typedef {Object} SCS_Response_Default\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteActuators\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Actuators'\r\n * @property {string} action - 'Default'\r\n * @property {number} messagesReceived - Number of messages received\r\n * \r\n */\r\n\r\n\r\n/**\r\n * SCS Response list\r\n * <pre>\r\n * mapped to '/list/'\r\n * </pre>\r\n * \r\n * @typedef {Object} SCS_Response_List\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteActuators\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Actuators'\r\n * @property {string} action - 'List'\r\n * @property {number} numberOfActuators - The number of actuators\r\n * @property {Object[]} actuators - Actuators list\r\n * @property {string} actuators[].actuatorID - Actuator ID\r\n * @property {string} actuators[].type - Actuator type\r\n * @property {string} actuators[]._sysID - Actuator sysID\r\n * @property {string} actuators[].engine - Engine name. Could be 'not defined'\r\n * @property {string} actuators[].state - Engine state.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * SCS Response info\r\n * <pre>\r\n * mapped to '/:actuatorID/info'\r\n * </pre>\r\n * \r\n * @typedef {Object} SCS_Response_Info\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes.SCS_RouteActuators\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {string} context - 'ST Server Actuators'\r\n * @property {string} action - 'Info'\r\n * @property {string} actuatorID - Actuator ID\r\n * @property {Object} actuator - Actuator data\r\n * @property {string} actuator.actuatorID - Actuator ID\r\n * @property {string} actuator.type - Actuator type\r\n * @property {string} actuator._sysID - Actuator sysID\r\n * @property {string} actuator.engine - Engine name. Could be 'not defined'\r\n * @property {string} actuator.state - Engine state.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Routes for Actuators\r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero.scs_routes\r\n * \r\n * @property {object} expressRoute - Express route object\r\n * @property {number} messages - Messages counter\r\n * @property {st.ngn.services.ActuatorsManager} actuatorsManager - Actuators manager object\r\n * \r\n */\r\nclass SCS_RouteActuators {\r\n\t\r\n\t/**\r\n\t * @constructs SCS_RouteActuators\r\n\t * \r\n\t * @param {st.ngn.services.ActuatorsManager} actuatorsManager - Actuators manager object\r\n\t */\r\n\tconstructor(actuatorsManager) {\r\n\t\t\r\n\t\tthis.expressRoute = null;\r\n\t\tthis.messages = 0;\r\n\t\tthis.actuatorsManager = actuatorsManager;\r\n\t\t\r\n\t\tthis.mapServiceRoutes();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map service routes\r\n\t */\r\n\tmapServiceRoutes() {\r\n\t\t\r\n\t\tlet routerActuators = this;\r\n\r\n\t\trouterActuators.expressRoute = express.Router();\r\n\t\t\r\n\t\t// create application/json parser \r\n\t\tlet jsonParser = bodyParser.json();\r\n\t\t\r\n\t\t// middleware that is specific to this router\r\n\t\trouterActuators.expressRoute.use(function messageCount(req, res, next) {\r\n\t\t\t routerActuators.messages++;\r\n\t\t\t\r\n//\t\t\tres.setHeader('Content-Type', 'text/html');\r\n//\t\t\tres.write('ST Server Nodes <br />', 'utf8')\r\n\t\t\t\r\n\t\t\t res.setHeader('Content-Type', 'application/json');\r\n\t\t\tnext();\r\n\t\t});\r\n\t\t\r\n\t\t// define the home page route\r\n\t\trouterActuators.expressRoute.get('/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterActuators._route_Default(req, res, {\r\n\t\t\t\t\"scsRouteActuators\": routerActuators\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// List of Actuators\r\n\t\trouterActuators.expressRoute.get('/list/', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterActuators._route_List(req, res, {\r\n\t\t\t\t\"scsRouteActuators\": routerActuators\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Get Actuator information\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/info', function(req, res) {\r\n\t\t\t\r\n\t\t\trouterActuators._route_Info(req, res, {\r\n\t\t\t\t\"scsRouteActuators\": routerActuators,\r\n\t\t\t\t\"actuatorID\": req.params.actuatorID\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Get Actuator options\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/options', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Get Actuator Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Get Options of Actuator\",\r\n\t\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator === null ) {\r\n\t\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stActuator = actuatorSearch.stActuator;\r\n\t\t\t\t\r\n\t\t\t\t_response.options = stActuator.options;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Set Actuator options\r\n\t\trouterActuators.expressRoute.post('/:actuatorID/options', jsonParser, function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Set Actuator Options' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tlet options = req.body.options;\r\n\t\t\t\r\n\t\t\tlet _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Set Options of Actuator\",\r\n\t\t\t\t\t\"actuatorID\": actuatorID,\r\n\t\t\t\t\t\"options\": options\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator === null ) {\r\n\t\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet stActuator = actuatorSearch.stActuator;\r\n\t\t\t\tstActuator.setOptions(options);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Start Actuator\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/start', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuator Start' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Start\",\r\n\t\t\t\t\t\"actuatorID\": req.params.actuatorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator !== null ) {\r\n\t\t\t\t\tactuatorSearch.stActuator.start().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Actuator Started' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Actuator not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t// Stop Actuator\r\n\t\trouterActuators.expressRoute.get('/:actuatorID/stop', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuator Stop' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\r\n\t\t\tlet amngr = routerActuators.actuatorsManager;\r\n\t\t\tlet actuatorID = req.params.actuatorID;\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Stop\",\r\n\t\t\t\t\t\"actuatorID\": req.params.actuatorID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tlet actuatorSearch = amngr.getActuatorBy_sysID(actuatorID);\r\n\t\t\t\tif (actuatorSearch.stActuator !== null ) {\r\n\t\t\t\t\tactuatorSearch.stActuator.stop().then(function(value) {\r\n\t\t\t\t\t\tconsole.log( value );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t\tconsole.log(' <*> Actuator Stopped' );\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\t}, function(reason) {\r\n\t\t\t\t\t\tconsole.log( reason );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_response.response = 'Actuator not found.';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Turn off Actuators of Node\r\n\t\trouterActuators.expressRoute.get('/:nodeID/turnOffActuators', function(req, res) {\r\n\t\t\t\r\n\t\t\tconsole.log(' <*> SeverControlService Actuators turnOffActuators' );\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\t\r\n\t\t\tvar _response = {\r\n\t\t\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\t\t\"action\" : \"Turn off actuators\",\r\n\t\t\t\t\t\"sensorID\": req.params.nodeID,\r\n\t\t\t\t\t\"response\" : \"test\"\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\trouterActuators.actuatorsManager.turnOffActuatorsOfNode(req.params.nodeID);\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\t_response.response = 'Something happends...';\r\n\t\t\t\t_response.error = e.message;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tres.jsonp(_response);\r\n\t\t\tres.end();\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns actuator data\r\n\t * @private\r\n\t */\r\n\t_getActuatorData(_act) {\r\n\t\tlet _actuatorData = {\r\n\t\t\t\t\"actuatorID\" : _act.config.actuatorID,\r\n\t\t\t\t\"type\": _act.config.type,\r\n\t\t\t\t\"_sysID\": _act.config._sysID,\r\n\t\t\t\t\"engine\": \"not defined\",\r\n\t\t\t\t\"state\": \"not defined\"\r\n\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tif (_act.actuatorEngine !== null) {\r\n\t\t\tif (_act.actuatorEngine.name !== undefined) {\r\n\t\t\t\t_actuatorData.engine = _act.actuatorEngine.name;\r\n\t\t\t}\r\n\t\t\t_actuatorData.state = _act.actuatorEngine.state;\r\n\t\t}\r\n\t\t\r\n\t\treturn _actuatorData;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for default action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t * \r\n\t */\r\n\t_route_Default(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteActuators = this;\r\n\t\tif (options.scsRouteActuators !== undefined) {\r\n\t\t\t_SCS_RouteActuators = options.scsRouteActuators;\r\n\t\t}\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\"action\" : \"Default\",\r\n\t\t\t\"messagesReceived\" : _SCS_RouteActuators.messages\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for list action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t */\r\n\t_route_List(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteActuators = this;\r\n\t\tif (options.scsRouteActuators !== undefined) {\r\n\t\t\t_SCS_RouteActuators = options.scsRouteActuators;\r\n\t\t}\r\n\t\t\r\n\t\tlet _amngr = _SCS_RouteActuators.actuatorsManager;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\"action\" : \"list\",\r\n\t\t\t\"numberOfActuators\": 0,\r\n\t\t\t\"actuators\" : []\r\n\t\t};\r\n\t\t\r\n\t\t_amngr.actuatorsList.forEach(function(_act, _i) {\r\n\t\t\t\r\n\t\t\tlet _actuatorData = _SCS_RouteActuators._getActuatorData(_act);\r\n\t\t\t_response.actuators.push(_actuatorData);\r\n\t\t});\r\n\t\t\r\n\t\t_response.numberOfActuators = _amngr.actuatorsList.length;\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Response for info action\r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {Object} req - Request object\r\n\t * @param {Object} res - Response object\r\n\t * @param {Object} options - Options\r\n\t */\r\n\t_route_Info(req, res, options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _SCS_RouteActuators = this;\r\n\t\tif (options.scsRouteActuators !== undefined) {\r\n\t\t\t_SCS_RouteActuators = options.scsRouteActuators;\r\n\t\t}\r\n\t\t\r\n\t\tlet _amngr = _SCS_RouteActuators.actuatorsManager;\r\n\t\r\n\t\tlet _actuatorID = options.actuatorID;\r\n\t\t\r\n\t\tlet _response = {\r\n\t\t\t\"context\" : \"ST Server Actuators\",\r\n\t\t\t\"action\" : \"Info\",\r\n\t\t\t\"actuatorID\" : _actuatorID,\r\n\t\t\t\"actuator\": {}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet _actuatorSearch = _amngr.getActuatorBy_sysID(_actuatorID);\r\n\t\t\tif (_actuatorSearch.stActuator === null ) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet _actuator = _actuatorSearch.stActuator;\r\n\t\t\t_response.actuator = _SCS_RouteActuators._getActuatorData(_actuator);\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t\r\n\t\t\t_response.response = 'Something happends...';\r\n\t\t\t_response.error = e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tres.jsonp(_response);\r\n\t\tres.end();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nmodule.exports = SCS_RouteActuators;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}