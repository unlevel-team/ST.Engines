{"version":3,"sources":["stEngines/enginesSYS_Hero/ngsysHero_ServerActuatorsSRV.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/ngsysHero_ServerActuatorsSRV.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Actuators services\r\n * for Server role\r\n * \r\n * SomeThings Engines System library\r\n * version Hero\r\n * \r\n */\r\n\r\n/**\r\n * Import ActuatorsServices\r\n * @ignore\r\n */\r\nlet ActuatorsServices = require('../services/ActuatorsServices.js').ActuatorsServices;\r\n\r\n\r\n/**\r\n * Actuators Services \r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero\r\n * @implements st.ngn.services.ActuatorsServices\r\n * \r\n * @property {NodesManager} nodesManager - Nodes manager object.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * \r\n */\r\nclass NGSYS_Hero_Server_ActuatorsSRV extends ActuatorsServices {\r\n\t\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs NGSYS_Hero_Server_ActuatorsSRV\r\n\t * \r\n\t * @param {st.ngn.services.ActuatorsManager} actuatorsManager - Actuators manager\r\n\t * @param {object} controlChannel - Actuators manager\r\n\t * @param {NodesManager} nodesManager - Nodes manager\r\n\t * \r\n\t */\r\n\tconstructor(actuatorsManager, controlChannel, nodesManager) {\r\n\t\t\r\n\t\tsuper(actuatorsManager, controlChannel);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tservice.nodesManager = nodesManager;\r\n\t\t\r\n//\t\tservice._mapControlEvents(actuatorsManager);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tsuper.initialize();\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (service.nodesManager === undefined ||\r\n\t\t\t\tservice.nodesManager === null) {\r\n\t\t\tthrow \"Nodes manager is required\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tservice._mapControlEventsForNodes(service.nodesManager);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t * \r\n\t * @param {st.ngn.services.ActuatorsManager} actuatorsManager - Actuators manager\r\n\t * \r\n\t */\r\n\t_mapControlEvents(actuatorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (actuatorsManager === undefined) {\r\n\t\t\tactuatorsManager = service.actuatorsManager;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n//\t\tactuatorsManager.actuatorsList.forEach(function(actuator, _i) {\r\n//\t\t\tservice._mapActuatorControlEvents(actuator);\r\n//\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events for nodes\r\n\t * \r\n\t * @param {NodesManager} nodesManager - Nodes manager\r\n\t */\r\n\t_mapControlEventsForNodes(nodesManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (nodesManager === undefined) {\r\n\t\t\tnodesManager = service.nodesManager;\r\n\t\t}\r\n\t\t\r\n\t\t// Map event NodeAdded\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeAdded, \r\n\t\t\tfunction(data) {\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeAdded(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t// Map event NodeDisconnected\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeDisconnected, \r\n\t\t\tfunction(data) {\r\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeDisconnected(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t// Map event NodeRemoved\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeRemoved, \r\n\t\t\tfunction(data) {\r\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeRemoved(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\t_mapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tsuper._mapControlMessages(socket, {\r\n\t\t\t\"service\" : service\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t */\r\n\t_unmapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsuper._unmapControlMessages(socket, {\r\n\t\t\t\"service\" : service\r\n\t\t});\r\n\t\t\r\n\r\n\t\tservice._mapped = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Manage actuators from node\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t */\r\n\tmanageActuatorsFromNode(stNode) {\r\n\t\t\r\n\t\tif (stNode.config._ActuatorsManaged !== undefined ) {\r\n\t\t\tthrow \"This node is already managed.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tservice._mapNodeControlEvents(stNode);\r\n\t\tservice._mapNodeControlMessages(stNode);\r\n\t\t\r\n\t\tif ( stNode.config.numActuators > 0 ) {\r\n\t\t\t\r\n\t\t\t// Emit message getActuatorsList\r\n\t\t\tstNode.socket.emit( service.CONSTANTS.Messages.getActuatorsList ); \r\n\t\t}\r\n\t\t\r\n\t\tstNode.config._ActuatorsManaged = true;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t_mapNodeControlEvents(stNode) {\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map node control messages\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t */\r\n\t_mapNodeControlMessages(stNode) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = stNode.socket;\r\n\t\t\r\n\t\t// Map event disconnect\r\n\t\tsocket.on(\"disconnect\", \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._unmapNodeControlMessages(stNode, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Map message ActuatorsList\r\n\t\tsocket.on(service.CONSTANTS.Messages.ActuatorsList, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_ActuatorsList(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message ActuatorOptions\r\n\t\tsocket.on(service.CONSTANTS.Messages.ActuatorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_ActuatorOptions(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message ActuatorOptionsUpdated\r\n\t\tsocket.on(service.CONSTANTS.Messages.ActuatorOptionsUpdated, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_ActuatorOptionsUpdated(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message ActuatorStarted\r\n\t\tsocket.on(service.CONSTANTS.Messages.ActuatorStarted, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_ActuatorStarted(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message ActuatorStopped\r\n\t\tsocket.on(service.CONSTANTS.Messages.ActuatorStopped, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_ActuatorStopped(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap node control messages\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t * @param {object} options - Options object\r\n\t */\r\n\t_unmapNodeControlMessages(stNode, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\r\n\t\t\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.ActuatorsList);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.ActuatorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.ActuatorOptionsUpdated);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.ActuatorStarted);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.ActuatorStopped);\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeAdded\r\n\t */\r\n\t_event_NodeAdded(data, options){\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet stNode = data.node;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservice.manageActuatorsFromNode(stNode);\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Cannot manage actuators of node. \" + e;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeDisconnected\r\n\t */\r\n\t_event_NodeDisconnected(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet stNode = data.node;\r\n\t\t\r\n\t\tservice._unmapNodeControlMessages(stNode, \r\n\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\"service\" : service\r\n\t\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeRemoved\r\n\t */\r\n\t_event_NodeRemoved(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet nodeID = data.nodeID;\r\n\t\tlet amng = service.actuatorsManager;\r\n\t\t\r\n\t\tlet stActuators = amng.getActuatorsByNode( nodeID );\r\n\r\n\t\tstActuators.actuators.forEach(function(actuator, _i, _actuators) {\r\n\r\n\t\t\tlet actuatorSearch = amng.getActuatorBy_sysID( actuator.config._sysID );\r\n\t\t\tif ( actuatorSearch.stActuator !== null ) {\r\n\t\t\t\tamng.actuatorsList.splice(actuatorSearch.position, 1);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorsList\r\n\t */\r\n\t_msg_ActuatorsList(msg, options) {\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _amng = _service.actuatorsManager;\r\n\t\tlet _node = options.node;\r\n\t\tlet _nodeID = _node.config.nodeID;\r\n\t\tlet _socket = _node.socket;\r\n\t\tlet _data = msg;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_ActuatorsSRV.Messages.ActuatorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\r\n\t\tif (_data.numActuators > 0 ) {\r\n\r\n\t\t\t_data.actuators.forEach(function(actDATA, _i) {\r\n\t\t\t\t\r\n\t\t\t\tlet _actConfig = {\r\n\t\t\t\t\t\"actuatorID\": actDATA.actuatorID,\r\n\t\t\t\t\t\"type\": actDATA.type,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"_sysID\": _nodeID + '.' + actDATA.actuatorID,\r\n\t\t\t\t\t\"_refSTNodeID\": _nodeID,\r\n\t\t\t\t\t\"_controlSocket\": _socket\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tlet _actOptions = {\r\n\t\t\t\t\t\"engine\": actDATA.engine,\r\n\t\t\t\t\t\"state\": actDATA.state\r\n\t\t\t\t};\r\n\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t\r\n\t\t\t\t\t_amng.addActuatorFromNode( _actConfig, _actOptions );\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Emit message getActuatorOptions\r\n\t\t\t\t\t_socket.emit(_service.CONSTANTS.Messages.getActuatorOptions, \r\n\t\t\t\t\t\t\t{\"actuatorID\" : actDATA.actuatorID});\r\n\t\t\t\t\t\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\tconsole.log('<~EEE~> NGSYS_Hero_Server_ActuatorsSRV.Messages.ActuatorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log('<~EEE~> Cannot add actuator from node.');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log(actDATA);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorOptions\r\n\t */\r\n\t_msg_ActuatorOptions(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet amng = service.actuatorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet actuatorID = msg.actuatorID;\r\n\t\tlet actuatorOptions = msg.options;\r\n\t\t\r\n\t\t\r\n\t\tlet actuator_sysID = node.config.nodeID + '.' + actuatorID;\r\n\t\t\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_ActuatorsSRV.Messages.ActuatorOptions');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~~~> ' + actuator_sysID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(actuatorOptions);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet actuatorSearch = amng.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\r\n\t\t\tact.options = actuatorOptions;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_ActuatorsSRV._msg_ActuatorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorOptionsUpdated\r\n\t */\r\n\t_msg_ActuatorOptionsUpdated(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet amng = service.actuatorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\r\n\t\tlet actuatorID = msg.actuatorID;\r\n\t\tlet actuator_sysID = node.config.nodeID + '.' + actuatorID;\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_ActuatorsSRV.ActuatorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet actuatorSearch = amng.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\r\n\t\t\t// Emit message getActuatorOptions\r\n\t\t\tsocket.emit(service.CONSTANTS.Messages.getActuatorOptions, \r\n\t\t\t\t\t{\"actuatorID\" : act.config.actuatorID});\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_ActuatorsSRV._msg_ActuatorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorStarted\r\n\t */\r\n\t_msg_ActuatorStarted(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet amng = service.actuatorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet actuatorID = msg.actuatorID;\r\n\t\tlet actuator_sysID = node.config.nodeID + '.' + actuatorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_ActuatorsSRV.ActuatorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log('<~~~> ' + actuator_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet actuatorSearch = amng.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\t\t\tlet engine = act.actuatorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.Working;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_ActuatorsSRV._msg_ActuatorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message ActuatorStopped\r\n\t */\r\n\t_msg_ActuatorStopped(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet amng = service.actuatorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet actuatorID = msg.actuatorID;\r\n\t\tlet actuator_sysID = node.config.nodeID + '.' + actuatorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_ActuatorsSRV.ActuatorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~~~> ' + actuator_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"actuatorID\": actuatorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet actuatorSearch = amng.getActuatorBy_sysID(actuator_sysID);\r\n\t\t\tif (actuatorSearch.stActuator === null) {\r\n\t\t\t\tthrow \"Actuator not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet act = actuatorSearch.stActuator;\r\n\t\t\tlet engine = act.actuatorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.Ready;\r\n\r\n\t\t} catch (e) {\t\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_ActuatorsSRV._msg_ActuatorStopped ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nlet _Lib = {\r\n\t\t\"NGSYS_Hero_Server_ActuatorsSRV\" : NGSYS_Hero_Server_ActuatorsSRV\r\n\t};\r\n\r\n\r\nmodule.exports = _Lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}