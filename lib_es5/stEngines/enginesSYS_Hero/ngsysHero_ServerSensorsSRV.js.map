{"version":3,"sources":["stEngines/enginesSYS_Hero/ngsysHero_ServerSensorsSRV.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/ngsysHero_ServerSensorsSRV.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Sensors services\r\n * for role Server\r\n * \r\n * SomeThings Engines System library\r\n * version Hero\r\n * \r\n */\r\n\r\n/**\r\n * Import SensorsServices\r\n * @ignore\r\n */\r\nlet SensorsServices = require('../services/SensorsServices.js').SensorsServices;\r\n\r\n\r\n/**\r\n * Sensors Services\r\n * for role Server\r\n * \r\n * version Hero\r\n * \r\n * @class\r\n * @memberof st.ngn.ngnSYS_Hero\r\n * @implements st.ngn.services.SensorsServices\r\n * \r\n */\r\nclass NGSYS_Hero_Server_SensorsSRV extends SensorsServices {\r\n\t\r\n\t/**\r\n\t * @construct NGSYS_Hero_Server_SensorsSRV\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t * @param {object} controlChannel - Control channel object\r\n\t * @param {NodesManager} nodesManager - Nodes manager object\r\n\t */\r\n\tconstructor(sensorsManager, controlChannel, nodesManager) {\r\n\t\t\r\n\t\tsuper(sensorsManager, controlChannel);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tservice.nodesManager = nodesManager;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tsuper.initialize();\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (service.nodesManager === undefined ||\r\n\t\t\t\tservice.nodesManager === null) {\r\n\t\t\tthrow \"Nodes manager is required\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tservice._mapControlEventsForNodes(service.nodesManager);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t */\r\n\t_mapControlEvents(sensorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (sensorsManager === undefined) {\r\n\t\t\tsensorsManager = service.sensorsManager;\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_mapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tsuper._mapControlMessages(socket, {\r\n\t\t\t\"service\" : service\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_unmapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tsuper._unmapControlMessages(socket, {\r\n\t\t\t\"service\" : service\r\n\t\t});\r\n\t\t\r\n\r\n\t\tservice._mapped = null;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events for nodes\r\n\t * \r\n\t * @param {NodesManager} nodesManager - Nodes manager object\r\n\t * \r\n\t */\r\n\t_mapControlEventsForNodes(nodesManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (nodesManager === undefined) {\r\n\t\t\tnodesManager = service.nodesManager;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// Map event NodeAdded\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeAdded, \r\n\t\t\tfunction(data) {\r\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeAdded(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t// Map event NodeDisconnected\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeDisconnected, \r\n\t\t\tfunction(data) {\r\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeDisconnected(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t// Map event NodeRemoved\r\n\t\tnodesManager.eventEmitter.on(nodesManager.CONSTANTS.Events.NodeRemoved, \r\n\t\t\tfunction(data) {\r\n\t\t\t\t\r\n\t\t\t\tservice._event_NodeRemoved(data, {\r\n\t\t\t\t\t\"service\" : service \r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Manage sensors from node\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t */\r\n\tmanageSensorsFromNode(stNode) {\r\n\t\t\r\n\t\tif (stNode.config._SensorsManaged !== undefined ) {\r\n\t\t\tthrow \"This node is already managed.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tservice._mapNodeControlEvents(stNode);\r\n\t\tservice._mapNodeControlMessages(stNode);\r\n\t\t\r\n\t\t\r\n\t\tif ( stNode.config.numSensors > 0 ) {\r\n\r\n\t\t\t// Emit message getSensorsList\r\n\t\t\tstNode.socket.emit( service.CONSTANTS.Messages.getSensorsList );\r\n\t\t}\r\n\t\t\r\n\t\tstNode.config._SensorsManaged = true;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t_mapNodeControlEvents(stNode) {\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map node control messages\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t */\r\n\t_mapNodeControlMessages(stNode) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = stNode.socket;\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorsList\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorsList, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorsList(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorOptions\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorOptions(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorOptionsUpdated\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorOptionsUpdated, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorOptionsUpdated(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorStarted\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorStarted, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorStarted(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorStopped\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorStopped, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorStopped(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap node control messages\r\n\t * \r\n\t * @param {Node} stNode - Node object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_unmapNodeControlMessages(stNode, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\r\n\t\t\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorsList);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorOptionsUpdated);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorStarted);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorStopped);\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeAdded\r\n\t * \r\n\t * @param {object} data - Data object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_event_NodeAdded(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet stNode = data.node;\r\n\t\t\r\n\t\tconsole.log('<~*~> ST NGSYS_Hero_Server_SensorsSRV._event_NodeAdded');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservice.manageSensorsFromNode(stNode);\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t\t// TODO: handle exception\r\n//\t\t\tthrow \"Cannot manage sensors of node. \" + e;\r\n\t\t\tconsole.log('<~EEE~> ST NGSYS_Hero_Server_SensorsSRV._event_NodeAdded');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log('<~EEE~> Cannot manage sensors of node');\t// TODO REMOVE DEBUG LOG\r\n\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeDisconnected\r\n\t * \r\n\t * @param {object} data - Data object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_event_NodeDisconnected(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet stNode = data.node;\r\n\t\t\r\n\t\tservice._unmapNodeControlMessages(stNode, \r\n\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\"service\" : service\r\n\t\t\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Event NodeRemoved\r\n\t * \r\n\t * @param {object} data - Data object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_event_NodeRemoved(data, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet nodeID = data.nodeID;\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\r\n\t\tlet stSensors = smng.getSensorsByNode( nodeID );\r\n\r\n\t\tstSensors.sensors.forEach(function(sensor, _i, _sensors) {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID( sensor.config._sysID );\r\n\t\t\tif ( sensorSearch.stSensor !== null ) {\r\n\t\t\t\tsmng.sensorsList.splice(sensorSearch.position, 1);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorsList\r\n\t * <pre>\r\n\t * Server receives message `SensorList` message from node \r\n\t * </pre>\r\n\t * \r\n\t * \r\n\t * @protected\r\n\t * \r\n\t * @param {object} msg - Message object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_msg_SensorsList(msg, options) {\r\n\t\t\r\n\t\tlet _service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\t_service = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _smng = _service.sensorsManager;\r\n\t\tlet _node = options.node;\r\n\t\tlet _nodeID = _node.config.nodeID;\r\n\t\tlet _socket = _node.socket;\r\n\t\tlet _data = msg;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_SensorsSRV.Messages.SensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\r\n\t\tif (_data.numSensors > 0 ) {\r\n\r\n\t\t\t_data.sensors.forEach(function(snsDATA, _i) {\r\n\t\t\t\t\r\n\t\t\t\tlet _snsConfig = {\r\n\t\t\t\t\t\"sensorID\": snsDATA.sensorID,\r\n\t\t\t\t\t\"type\": snsDATA.type,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"_sysID\": _nodeID + '.' + snsDATA.sensorID,\r\n\t\t\t\t\t\"_refSTNodeID\": _nodeID,\r\n\t\t\t\t\t\"_controlSocket\": _socket\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet _snsOptions = {\r\n\t\t\t\t\t\"engine\": snsDATA.engine,\r\n\t\t\t\t\t\"state\": snsDATA.state\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t\r\n\t\t\t\t\t_smng.addSensorFromNode( _snsConfig, _snsOptions);\r\n\t\t\t\t\t\r\n\t\t\t\t\t_socket.emit(_service.CONSTANTS.Messages.getSensorOptions, {\r\n\t\t\t\t\t\t\"sensorID\" : _snsConfig.sensorID\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\tconsole.log('<~EEE~> NGSYS_Hero_Server_SensorsSRV.Messages.SensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log('<~EEE~> Cannot add sensor from node.');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t\tconsole.log(_snsConfig);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptions\r\n\t * \r\n\t * @param {object} msg - Message object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_msg_SensorOptions(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet sensorOptions = msg.options;\r\n\r\n\t\t\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\t\t\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_SensorsSRV.Messages.SensorOptions');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(sensorOptions);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\r\n\t\t\tsns.options = sensorOptions;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptionsUpdated\r\n\t * \r\n\t * @param {object} msg - Message object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_msg_SensorOptionsUpdated(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log('<~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\t\r\n\t\t\t// Emit message getSensorOptions\r\n\t\t\tsocket.emit(service.CONSTANTS.Messages.getSensorOptions,\r\n\t\t\t\t\t{\"sensorID\" : sns.config.sensorID});\r\n\t\t\t\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorStarted\r\n\t * \r\n\t * @param {object} msg - Message object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_msg_SensorStarted(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log('<~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\tlet engine = sns.sensorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.SEstate_Working;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV.SensorStarted ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorStopped\r\n\t * \r\n\t * @param {object} msg - Message object\r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.ngnSYS_Hero.NGSYS_Hero_Server_SensorsSRV} [options.service] - Sensors Service object\r\n\t */\r\n\t_msg_SensorStopped(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined ||\r\n\t\t\t\toptions === null) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\tlet engine = sns.sensorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.SEstate_Ready;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorStopped ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nlet _Lib = {\r\n\t\"NGSYS_Hero_Server_SensorsSRV\" : NGSYS_Hero_Server_SensorsSRV\r\n};\r\n\r\n\r\nmodule.exports = _Lib;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}