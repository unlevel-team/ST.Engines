{"version":3,"sources":["stEngines/enginesSYS_Hero/ngsysHero_ServerSensorsSRV.js"],"names":[],"mappings":"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","file":"stEngines/enginesSYS_Hero/ngsysHero_ServerSensorsSRV.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Sensors services\r\n * for Node sever\r\n * \r\n * SomeThings Engines System library\r\n * version Hero\r\n * \r\n */\r\n\r\nlet SensorsServices = require('../services/SensorsServices.js').SensorsServices;\r\n\r\n\r\n/**\r\n * Sensors Services\r\n */\r\nclass NGSYS_Hero_Server_SensorsSRV extends SensorsServices {\r\n\t\r\n\t\r\n\tconstructor(sensorsManager, controlChannel) {\r\n\t\t\r\n\t\tsuper(sensorsManager, controlChannel);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t */\r\n\t_mapControlEvents(sensorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (sensorsManager === undefined) {\r\n\t\t\tsensorsManager = service.sensorsManager;\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t */\r\n\t_mapControlMessages(socket) {\r\n\t\t\r\n\t\tsuper._mapControlMessages(socket);\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet smng = service.sensorsManager;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t */\r\n\t_unmapControlMessages(socket) {\r\n\t\t\r\n\t\tsuper._unmapControlMessages(socket);\r\n\t\t\r\n\t\tlet service = this;\r\n\r\n\t\tservice._mapped = null;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Manage sensors from node\r\n\t */\r\n\tmanageSensorsFromNode(stNode) {\r\n\t\t\r\n\t\tif (stNode.config._SensorsManaged !== undefined ) {\r\n\t\t\tthrow \"This node is already managed.\";\r\n\t\t}\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tservice._mapNodeControlEvents(stNode);\r\n\t\tservice._mapNodeControlMessages(stNode);\r\n\t\t\r\n\t\t\r\n\t\tstNode.config._SensorsManaged = true;\r\n\t}\r\n\t\r\n\t\r\n\t_mapNodeControlEvents(stNode) {\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map node control messages\r\n\t */\r\n\t_mapNodeControlMessages(stNode) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\tlet socket = stNode.socket;\r\n\t\t\r\n\t\t\r\n\t\t// Map event disconnect\r\n\t\tsocket.on(\"disconnect\", \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._unmapNodeControlMessages(stNode, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorsList\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorsList, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorsList(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorOptions\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorOptions, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorOptions(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorOptionsUpdated\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorOptionsUpdated, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorOptionsUpdated(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t\r\n\t\t// Map message SensorStarted\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorStarted, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorStarted(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// Map message SensorStopped\r\n\t\tsocket.on(service.CONSTANTS.Messages.SensorStopped, \r\n\t\t\t\t\r\n\t\t\tfunction(msg){\r\n\t\t\t\tservice._msg_SensorStopped(msg, \r\n\t\t\t\t\t{\t\"node\" : stNode,\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Umap node control messages\r\n\t */\r\n\t_unmapNodeControlMessages(stNode, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\r\n\t\t\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorsList);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorOptions);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorOptionsUpdated);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorStarted);\r\n\t\tsocket.removeAllListeners(service.CONSTANTS.Messages.SensorStopped);\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorsList\r\n\t */\r\n\t_msg_SensorsList(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\tlet data = options.data;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_SensorsSRV.Messages.SensorsList');\t// TODO REMOVE DEBUG LOG\r\n\t\t\r\n\r\n\t\tif (data.numSensors > 0 ) {\r\n\r\n\t\t\tdata.sensors.forEach(function(snsDATA, _i) {\r\n\r\n\t\t\t\tsnsDATA._sysID = node.config.nodeID + '.' + snsDATA.sensorID;\r\n\t\t\t\tsnsDATA._refSTNodeID = node.config.nodeID;\r\n\r\n//\t\t\t\tsnsDATA._nodeEvents = node.eventEmitter;\r\n\t\t\t\tsnsDATA._controlSocket = socket;\r\n\r\n\t\t\t\tsmng.addSensor( snsDATA );\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptions\r\n\t */\r\n\t_msg_SensorOptions(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = msg.sensorID;\r\n\t\tlet sensorOptions = msg.options;\r\n\r\n\t\t\r\n\t\tconsole.log('<*> NGSYS_Hero_Server_SensorsSRV.Messages.SensorOptions');\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\r\n\t\t\tsns.options = sensorOptions;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorOptions ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorOptionsUpdated\r\n\t */\r\n\t_msg_SensorOptionsUpdated(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\t\r\n\t\tlet response = {\r\n\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorOptionsUpdated');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(options);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\r\n\t\t\tsmng.getOptionsOfSensor(sns);\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorStarted\r\n\t */\r\n\t_msg_SensorStarted(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorStarted');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log('<~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\tlet engine = sns.sensorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.SEstate_Working;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorOptionsUpdated ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Message SensorStopped\r\n\t */\r\n\t_msg_SensorStopped(msg, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tlet smng = service.sensorsManager;\r\n\t\tlet node = options.node;\r\n\t\tlet socket = node.socket;\r\n\t\t\r\n\t\tlet sensorID = options.sensorID;\r\n\t\tlet sensor_sysID = node.config.nodeID + '.' + sensorID;\r\n\r\n\t\tconsole.log('<*> ST NGSYS_Hero_Server_SensorsSRV.SensorStopped');\t// TODO REMOVE DEBUG LOG\r\n\t\tconsole.log(' <~~~> ' + sensor_sysID);\t// TODO REMOVE DEBUG LOG\r\n\r\n\t\tlet response = {\r\n\t\t\t\t\"sensorID\": sensorID\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\r\n\t\t\tlet sensorSearch = smng.getSensorBy_sysID(sensor_sysID);\r\n\t\t\tif (sensorSearch.stSensor === null) {\r\n\t\t\t\tthrow \"Sensor not found\";\r\n\t\t\t}\r\n\r\n\t\t\tlet sns = sensorSearch.stSensor;\r\n\t\t\tlet engine = sns.sensorEngine;\r\n\t\t\t\r\n\t\t\tengine.state = engine.CONSTANTS.States.SEstate_Ready;\r\n\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tresponse.result = \"ERROR\";\r\n\t\t\tresponse.error = e;\r\n\r\n\t\t  console.log('<EEE> NGSYS_Hero_Server_SensorsSRV._msg_SensorStopped ERROR');\t// TODO REMOVE DEBUG LOG\r\n\t\t  console.log(response);\t// TODO REMOVE DEBUG LOG\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nlet _Lib = {\r\n\t\"NGSYS_Hero_Server_SensorsSRV\" : NGSYS_Hero_Server_SensorsSRV\r\n};\r\n\r\n\r\nmodule.exports = _Lib;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}