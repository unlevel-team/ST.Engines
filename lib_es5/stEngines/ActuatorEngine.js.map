{"version":3,"sources":["stEngines/ActuatorEngine.js"],"names":[],"mappings":"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","file":"stEngines/ActuatorEngine.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * ActuatorEngine\r\n * \r\n * Generic process for an Actuator\r\n * \r\n * @ignore\r\n */\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n\r\n/**\r\n * ActuatorEngine CONSTANTS\r\n * \r\n * @memberof st.ngn\r\n */\r\nconst ActuatorEngine_CONSTANTS = {\r\n\t\t\r\n\t\"States\" : {\r\n\t\t\"Config\" : \"config\",\r\n\t\t\"Ready\" : \"ready\",\r\n\t\t\"Working\" : \"working\",\r\n\t\t\"Stop\" : \"stop\"\r\n\t},\r\n\t\r\n\t\r\n\t\"Events\" : {\r\n\t\t\"MainLoop_Tick\" : \"Main Loop Tick\",\r\n\t\t\"MainLoop_Stop\" : \"Main Loop Stop\",\r\n\t\t\r\n\t\t\"ActuatorEngine_Start\" : \"AE start\",\r\n\t\t\"ActuatorEngine_Stop\" : \"AE stop\",\r\n\r\n\t\t\r\n\t\t\"ActuatorData\" : \"Actuator Data\"\r\n\t\t\r\n\t}\r\n\t\t\r\n};\r\n\r\n\r\n\r\n/**\r\n * ActuatorEngine_Start event.\r\n *\r\n * @event st.ngn.ActuatorEngine#ActuatorEngine_Start\r\n * @memberof st.ngn.ActuatorEngine\r\n * @type {object}\r\n * @property {st.ngn.ActuatorEngine} engine - The engine that is started.\r\n */\r\n\r\n/**\r\n * ActuatorEngine_Stop event.\r\n *\r\n * @event st.ngn.ActuatorEngine#ActuatorEngine_Stop\r\n * @memberof st.ngn.ActuatorEngine\r\n * @type {object}\r\n * @property {st.ngn.ActuatorEngine} engine - The engine that is stopped.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Actuator engine library\r\n * \r\n * @namespace ActuatorEngine_Lib\r\n * @memberof st.ngn\r\n */\r\nlet ActuatorEngine_Lib = {\r\n\t\r\n\t/**\r\n\t * Initialize actuator engine\r\n\t * \r\n\t * @function\r\n\t * @memberof st.ngn.ActuatorEngine_Lib\r\n\t * \r\n\t * @param {st.ngn.Actuator} act - Actuator object\r\n\t */\r\n\t\"initialze_ActuatorEngine\" : function (act) {\r\n\t\t\r\n\t\t\r\n\t\tlet _options = act.config.options;\r\n\t\tlet _actConfig = act.config;\r\n\r\n\t\t\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ \\/ ~~~\r\n\t\t// Actuator Engine URL \r\n\t\tif (_options.actuatorEngineURL !== undefined && \r\n\t\t\t\t_options.actuatorEngineURL !== null) {\r\n\t\t\t\r\n\t\t\tact._actuatorEngine = null;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tact._actuatorEngine = require(_options.actuatorEngineURL);\r\n\t\t\t\tact.actuatorEngine = new act._actuatorEngine(_actConfig);\r\n\t\t\t\tact.actuatorEngine.initialize();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t  console.log('<EEE> Actuator.initialize');\t// TODO REMOVE DEBUG LOG\r\n\t\t\t\t  console.log(e);\t// TODO REMOVE DEBUG LOG\r\n\t\t\t}\r\n\t\t} \r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ /\\ ~~~\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ \\/ ~~~\r\n\t\t// Engine URI (stURI format) \r\n\t\t//\r\n\t\t// Try new methods for load engines\r\n\t\t// \r\n\t\tif (_options.engineURI !== undefined && \r\n\t\t\t\t_options.engineURI !== null && \r\n\t\t\t\tact.actuatorEngine === null) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet _BaseEngines_Lib = require('./baseEngines/stBaseNGN.js').BaseEngines_Lib;\r\n\t\t\t\r\n\t\t\t// console.log('<~i~> SensorEngine_Lib.initialze_ActuatorEngine');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t// console.log(act);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tact.actuatorEngine = _BaseEngines_Lib.initialize_Engine({\r\n\t\t\t\t\t'engineOptions': _options,\r\n\t\t\t\t\t'bngnOptions': _actConfig\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tact.actuatorEngine.initialize();\r\n\r\n\t\t\t\t\r\n\t\t\t} catch (_e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\tconsole.log('<EEE> ActuatorEngine_Lib.initialze_ActuatorEngine');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\tconsole.log(' <~> _BaseEngines_Lib.initialize_Engine');\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t\tconsole.log(_e);\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ /\\ ~~~\r\n\t\t\r\n\t}\r\n\t\r\n};\r\n\r\n\r\n/**\r\n * Actuator Engine\r\n * \r\n * @class\r\n * @memberof st.ngn\r\n * \r\n * @property {object} config - Configuration.\r\n * @property {object} _mainLoop - Main loop reference object.\r\n * @property {String} state - State.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * \r\n */\r\nclass ActuatorEngine {\r\n\t\r\n\t/**\r\n\t * @constructs ActuatorEngine\r\n\t * \r\n\t * @param {object} config ActuatorEngine object\r\n\t */\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tlet _actEngine = this;\r\n\t\t_actEngine.config = config;\r\n\t\t_actEngine._mainLoop = null;\r\n\t\t\r\n\t\t_actEngine.CONSTANTS = ActuatorEngine_CONSTANTS;\r\n\t\t_actEngine.state = _actEngine.CONSTANTS.States.Config;\r\n\t\t\r\n\t\t\r\n\t\t_actEngine.eventEmitter = new EventEmitter();\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet actuatorEngine = this;\r\n\t\t\r\n\t\tactuatorEngine.eventEmitter.on( actuatorEngine.CONSTANTS.Events.MainLoop_Stop, function() {\r\n\t\t\tclearInterval( actuatorEngine._mainLoop );\r\n\t\t\tactuatorEngine.state = actuatorEngine.CONSTANTS.States.Ready;\r\n\t\t});\r\n\t\t\r\n\t\tactuatorEngine.state = actuatorEngine.CONSTANTS.States.Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Main loop\r\n\t */\r\n\tmainLoop() {\r\n\t  let actuatorEngine = this;\r\n\t  \r\n\t  if ( actuatorEngine.state !== actuatorEngine.CONSTANTS.States.Ready ) {\r\n\t\t  throw \"Bad state\";\r\n\t  }\r\n\t  \r\n\t  actuatorEngine.state = actuatorEngine.CONSTANTS.States.Working;\r\n\t  \r\n\t  actuatorEngine._mainLoop = setInterval(() => {\r\n\t\t  if (actuatorEngine.state === actuatorEngine.CONSTANTS.States.Working) {\r\n\t\t\t  actuatorEngine.eventEmitter.emit(actuatorEngine.CONSTANTS.Events.MainLoop_Tick);\r\n\t\t  } else {\r\n\t\t\t  actuatorEngine.eventEmitter.emit(actuatorEngine.CONSTANTS.Events.MainLoop_Stop);\r\n\t\t  }\r\n\t  }, actuatorEngine.config.loopTime);\r\n\t  \r\n\t}\r\n\t\r\n\t/**\r\n\t * Stop main loop\r\n\t * \r\n\t * @fires st.ngn.ActuatorEngine#ActuatorEngine_Stop\r\n\t */\r\n\tstopMainLoop() {\r\n\t\tlet actuatorEngine = this;\r\n\t\tactuatorEngine.eventEmitter.emit(actuatorEngine.CONSTANTS.Events.MainLoop_Stop);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start engine\r\n\t * @abstract \r\n\t */\r\n\tstartEngine() {\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Stop engine\r\n\t * @abstract \r\n\t */\t\r\n\tstopEngine() {\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get options\r\n\t * @abstract \r\n\t * @return {object} Options object\r\n\t */\t\r\n\tgetOptions() {\r\n\t\treturn {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set options\r\n\t * @abstract \r\n\t * @param {object} options - Options object.\r\n\t */\t\r\n\tsetOptions(options) {\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nlet _lib = {\r\n\t\t\"ActuatorEngine\" : ActuatorEngine,\r\n\t\t\"ActuatorEngine_Lib\" : ActuatorEngine_Lib\r\n\t\t\t\r\n\t};\r\n\r\n\r\nmodule.exports = _lib;\r\n\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}