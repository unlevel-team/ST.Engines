{"version":3,"sources":["stEngines/services/SensorsServices.js"],"names":[],"mappings":"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","file":"stEngines/services/SensorsServices.js","sourcesContent":["\"use strict\";\r\n\r\n/*\r\n SomeThings Sensors services library\r\n\r\n*/\r\n\r\n\r\n/**\r\n * Sensor list message\r\n * \r\n * @typedef {Object} SensorList_MSG\r\n * @memberof st.ngn.services.SensorsServices\r\n * @type Object\r\n * @protected\r\n * \r\n * @property {number} numSensors - Number of sensors\r\n * @property {object[]} sensors - Sensors list\r\n * @property {string} sensors.sensorID - Sensor ID\r\n * @property {string} sensors.type - Sensor type\r\n * @property {string} sensors.engine - Sensor engine type\r\n * @property {string} sensors.state - Sensor engine state\r\n * \r\n * \r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Sensors services constants\r\n * \r\n * @memberof st.ngn.services\r\n * \r\n */\r\nconst SensorsServices_CONSTANTS = {\r\n\t\t\r\n\t\"Messages\" : {\r\n\t\t\r\n\t\t\"getSensorsList\" : \"Get Sensors List\",\r\n\t\t\"SensorsList\" : \"Sensors List\",\r\n\t\t\"getSensorInfo\" : \"Get Sensor Info\",\r\n\t\t\"SensorInfo\" : \"Sensor Info\",\r\n\t\t\"getSensorOptions\" : \"Get Sensor Options\",\r\n\t\t\"SensorOptions\" : \"Sensor Options\",\r\n\t\t\"setSensorOptions\" : \"Set Sensor Options\",\r\n\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\",\r\n\t\t\r\n\t\t\"StartSensor\" : \"StartSensor\",\r\n\t\t\"SensorStarted\" : \"SensorStarted\",\r\n\t\t\"StopSensor\" : \"StopSensor\",\r\n\t\t\"SensorStopped\" : \"SensorStopped\",\r\n\t\t\r\n\t\t\"TurnOffSensors\" : \"TurnOffSensors\"\r\n\r\n\t}\r\n\t\t\r\n};\r\n\r\n\r\n/**\r\n * Sensors Services\r\n * \r\n * <pre>\r\n * manages the control messages related to sensors\r\n * </pre>\r\n * \r\n * @class\r\n * \r\n * @memberof st.ngn.services\r\n */\r\nclass SensorsServices {\r\n\t\r\n\t/**\r\n\t * \r\n\t * @constructs SensorsServices\r\n\t * \r\n\t * @param {st.ngn.services.SensorsManager} sensorsManager - Sensors manager object\r\n\t * @param {object} controlChannel - Control channel object\r\n\t */\r\n\tconstructor(sensorsManager, controlChannel) {\r\n\t\t\r\n\t\tlet ssrv = this;\r\n\t\t\r\n\t\tssrv.CONSTANTS = SensorsServices_CONSTANTS;\r\n\t\tssrv.sensorsManager = sensorsManager;\r\n\t\tssrv.controlChannel = controlChannel;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initilize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (service.sensorsManager === undefined ||\r\n\t\t\t\tservice.sensorsManager === null) {\r\n\t\t\tthrow \"Sensors manager is required\";\r\n\t\t}\r\n\t\t\r\n\t\tif (service.controlChannel === undefined ||\r\n\t\t\t\tservice.controlChannel === null) {\r\n\t\t\tthrow \"Control channel is required\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservice._mapControlEvents(service.sensorsManager);\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Error mapping control events. \" + e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservice._mapControlMessages(\r\n\t\t\t\t\tservice.controlChannel.socket,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tthrow \"Error mapping control messages. \" + e;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control events\r\n\t * \r\n\t * @param {SensorsManager} sensorsManager - Sensors manager object.\r\n\t */\r\n\t_mapControlEvents(sensorsManager) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (sensorsManager === undefined) {\r\n\t\t\tsensorsManager = service.sensorsManager;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {SensorsServices} [options.service] - Sensors Service object\r\n\t */\r\n\t_mapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif (service._mapped !== undefined && \r\n\t\t\t\tservice._mapped === true) {\r\n\t\t\tthrow \"control messages already mapped.\";\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif (socket === undefined) {\r\n\t\t\tsocket = service.controlChannel.socket;\r\n\t\t}\t\t\r\n\t\t\r\n\t\tsocket.on(\"connect\", function(data) {\r\n\t\t\tif (service._mapped !== true) {\r\n\t\t\t\tservice._mapControlMessages(socket,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"service\" : service\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tsocket.on(\"disconnect\", function(data) {\r\n\t\t\tservice._unmapControlMessages(socket,\r\n\t\t\t\t{\r\n\t\t\t\t\t\"service\" : service\r\n\t\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\tservice._mapped = true;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Unmap control messages\r\n\t * \r\n\t * @param {object} socket - Socket object\r\n\t * @param {object} options - Options object\r\n\t * @param {SensorsServices} [options.service] - Sensors Service object\r\n\t */\r\n\t_unmapControlMessages(socket, options) {\r\n\t\t\r\n\t\tlet service = this;\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tif (options.service !== undefined) {\r\n\t\t\tservice = options.service;\r\n\t\t}\r\n\t\t\r\n\t\tif (service._mapped === undefined || \r\n\t\t\t\tservice._mapped !== true) {\r\n\t\t\tthrow \"control messages not already mapped.\";\r\n\t\t}\r\n\t\t\r\n\t\tif (socket === undefined) {\r\n\t\t\tsocket = service.controlChannel.socket;\r\n\t\t}\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\nlet _lib = {\r\n\t\t\r\n\t\"SensorsServices_CONSTANTS\": SensorsServices_CONSTANTS,\r\n\t\"SensorsServices\": SensorsServices\r\n\t\t\t\r\n};\r\n\r\n\r\n\r\nmodule.exports = _lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}