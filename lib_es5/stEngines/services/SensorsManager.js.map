{"version":3,"sources":["stEngines/services/SensorsManager.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAcA,IAAI,eAAe,QAAQ,QAAR,EAAkB,YAArC;;;;;;;;AASA,IAAM,2BAA2B;;AAEhC,WAAW;AACV,iBAAgB,cADN;AAEV,0BAAyB;AAFf;AAFqB,CAAjC;;;;;;;;;;;;;;;;;;;;;;;;;IAiCM,c;;;;;;AAKL,2BAAc;AAAA;;AAEb,MAAI,QAAQ,IAAZ;AACA,QAAM,WAAN,GAAoB,EAApB;AACA,QAAM,YAAN,GAAqB,IAAI,YAAJ,EAArB;;AAEA,QAAM,SAAN,GAAkB,wBAAlB;AAEA;;;;;;;;;;;4BAQS,M,EAAQ;;AAEjB,OAAI,OAAO,IAAX;;AAEA,OAAI,eAAe,KAAK,aAAL,CAAmB,OAAO,MAAP,CAAc,EAAjC,CAAnB;;AAEA,OAAI,aAAa,QAAb,KAA0B,IAA9B,EAAoC;AACnC,UAAM,2BAAN;AACA;;AAED,QAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;;;AAGA,QAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAAL,CAAe,MAAf,CAAsB,WAA7C,EAA0D,MAA1D;AAEA;;;;;;;;;;;;gCAWa,Q,EAAU;;AAEvB,OAAI,OAAO,IAAX;;AAEA,OAAI,SAAS,IAAb;AACA,OAAI,KAAK,CAAT;;AAEA,QAAK,KAAK,WAAL,CAAiB,GAAjB,CAAqB,UAAS,CAAT,EAAY;AAAC,WAAO,EAAE,MAAF,CAAS,EAAhB;AAAqB,IAAvD,EAAyD,OAAzD,CAAiE,QAAjE,CAAL;AACA,OAAI,OAAO,CAAC,CAAZ,EAAe;AACd,aAAS,KAAK,WAAL,CAAiB,EAAjB,CAAT;AACA;;AAED,UAAO;AACN,gBAAY,MADN;AAEN,gBAAY;AAFN,IAAP;AAIA;;;;;;;;mCAMgB;;AAEhB,OAAI,OAAO,IAAX;AACA,OAAI,UAAU,KAAK,WAAnB;;AAEA,WAAQ,OAAR,CAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB;;AAElC,QAAK,KAAK,YAAL,KAAsB,IAA3B,EAAkC;AACjC,SAAI,aAAa,KAAK,YAAtB;;AAEA,SAAI,WAAW,KAAX,KAAqB,WAAW,SAAX,CAAqB,MAArB,CAA4B,OAArD,EAA8D;AAC7D,iBAAW,UAAX;AACA;AACD;AACD,IATD;;AAWA,WAAQ,GAAR,CAAY,mCAAZ,E;AACA;;;;;;AAOF,IAAI,qBAAqB;AACvB,mBAAmB,cADI;AAEvB,cAAc;;AAFS,CAAzB;;AAMA,OAAO,OAAP,GAAiB,kBAAjB","file":"stEngines/services/SensorsManager.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * SensorsManager\r\n * \r\n * Generic manager for Sensors\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * SensorsManager CONSTANTS\r\n * \r\n * @memberof st.ngn.services\r\n * \r\n */\r\nconst SensorsManager_CONSTANTS = {\r\n\t\t\r\n\t\"Events\" : {\r\n\t\t\"SensorAdded\" : \"Sensor added\",\r\n\t\t\"SensorOptionsUpdated\" : \"Sensor Options Updated\"\r\n\t}\r\n};\r\n\r\n\r\n\r\n/**\r\n * The result object.\r\n * \r\n * @typedef {Object} SearchResult\r\n * @memberof st.ngn.services.SensorsManager\r\n * \r\n * @type Object\r\n * @property {(st.ngn.Sensor|null)} STsensor - The Sensor object, may be null.\r\n * @property {number} position - The position in list.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Sensors Manager\r\n * \r\n * @class\r\n * @memberof st.ngn.services\r\n * \r\n * @property {st.ngn.Sensor[]} sensorsList - List of Sensors.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * \r\n */\r\nclass SensorsManager {\r\n\t\r\n\t/**\r\n\t * @constructs SensorsManager\r\n\t */\r\n\tconstructor() {\r\n\t\t\r\n\t\tlet _smng = this;\r\n\t\t_smng.sensorsList = [];\r\n\t\t_smng.eventEmitter = new EventEmitter();\r\n\t\t\r\n\t\t_smng.CONSTANTS = SensorsManager_CONSTANTS;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add sensor\r\n\t * \r\n\t * @param {st.ngn.Sensor} sensor - The Sensor object\r\n\t */\r\n\taddSensor(sensor) {\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tlet sensorSearch = smng.getSensorByID(sensor.config.id);\r\n\t\t\r\n\t\tif (sensorSearch.STsensor !== null) {\r\n\t\t\tthrow \"Sensor ID already exists.\";\r\n\t\t}\r\n\t\t\r\n\t\tsmng.sensorsList.push(sensor);\r\n\t\t\r\n\t\t// Emit message SensorAdded\r\n\t\tsmng.eventEmitter.emit(smng.CONSTANTS.Events.SensorAdded, sensor);\r\n\t\r\n\t}\r\n\t\r\n\r\n\t\r\n\t/**\r\n\t * Returns Sensor searched by ID\r\n\t * \r\n\t * @param {String} sensorID - Sensor ID\r\n\t * @returns {st.ngn.services.SensorsManager.SearchResult} result - Result object\r\n\t *  \r\n\t */\r\n\tgetSensorByID(sensorID) {\r\n\r\n\t\tlet smng = this;\r\n\t\t\r\n\t\tlet sensor = null;\r\n\t\tlet _i = 0;\r\n\t\t\r\n\t\t_i = smng.sensorsList.map(function(x) {return x.config.id; }).indexOf(sensorID);\r\n\t\tif (_i !== -1) {\r\n\t\t\tsensor = smng.sensorsList[_i];\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t\"STsensor\": sensor,\r\n\t\t\t\"position\": _i\r\n\t\t};\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Turn off sensors\r\n\t */\r\n\tturnOffSensors() {\r\n\t\t\r\n\t\tlet smng = this;\r\n\t\tlet snsList = smng.sensorsList;\r\n\t\t\r\n\t\tsnsList.forEach(function(_sns, _i) {\r\n\t\t\t\r\n\t\t\tif ( _sns.sensorEngine !== null ) {\r\n\t\t\t\tlet _snsEngine = _sns.sensorEngine;\r\n\t\t\t\t\r\n\t\t\t\tif (_snsEngine.state === _snsEngine.CONSTANTS.States.Working) {\r\n\t\t\t\t\t_snsEngine.stopEngine();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tconsole.log('<*> SensorsManager.turnOffSensors');\t// TODO REMOVE DEBUG LOG\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\nlet SensorsManager_Lib = {\r\n\t\t\"SensorsManager\" : SensorsManager,\r\n\t\t\"CONSTANTS\" : SensorsManager_CONSTANTS\r\n\t\t\r\n\t};\r\n\r\nmodule.exports = SensorsManager_Lib;"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}