{"version":3,"sources":["stEngines/SensorEngine.js"],"names":[],"mappings":"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","file":"stEngines/SensorEngine.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * SensorEngine\r\n * \r\n * Generic process for a Sensor\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n/**\r\n * SensorEngine CONSTANTS\r\n * \r\n * @memberof st.ngn\r\n * \r\n */\r\nconst SensorEngine_CONSTANTS = {\r\n\t\t\r\n\t\"States\" : {\r\n\t\t\"Config\" : \"config\",\r\n\t\t\"Ready\" : \"ready\",\r\n\t\t\"Working\" : \"working\",\r\n\t\t\"Stop\" : \"stop\"\r\n\t},\r\n\t\r\n\t\r\n\t\"Events\" : {\r\n\t\t\"MainLoop_Tick\" : \"Main Loop Tick\",\r\n\t\t\"MainLoop_Stop\" : \"Main Loop Stop\",\r\n\t\t\r\n\t\t\"SensorEngine_Start\" : \"SE start\",\r\n\t\t\"SensorEngine_Stop\" : \"SE stop\",\r\n\t\t\r\n\t\t\"SensorData\" : \"Sensor Data\",\r\n\t\t\r\n\t\t\r\n\t\t\"Engine_Start\" : \"NGN start\",\r\n\t\t\"Engine_Stop\" : \"NGN stop\",\r\n\r\n\t\t\r\n\t\t\"EngineData\" : \"NGN Data\"\r\n\t\t\r\n\t}\r\n\t\r\n};\r\n\r\n\r\n\r\n/**\r\n * SensorEngine_Start event.\r\n *\r\n * @event st.ngn.SensorEngine#SensorEngine_Start\r\n * @memberof st.ngn.SensorEngine\r\n * @type {object}\r\n * @property {st.ngn.SensorEngine} engine - The engine that is started.\r\n */\r\n\r\n/**\r\n * SensorEngine_Stop event.\r\n *\r\n * @event st.ngn.SensorEngine#SensorEngine_Stop\r\n * @memberof st.ngn.SensorEngine\r\n * @type {object}\r\n * @property {st.ngn.SensorEngine} engine - The engine that is stopped.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Sensor engine library\r\n * \r\n * @namespace SensorEngine_Lib\r\n * @memberof st.ngn\r\n */\r\nlet SensorEngine_Lib = {\r\n\t\t\r\n\t'CONSTANTS': SensorEngine_CONSTANTS,\r\n\t\r\n\t\t\r\n\t/**\r\n\t * Initialize sensor engine\r\n\t * \r\n\t * @function\r\n\t * @memberof st.ngn.SensorEngine_Lib\r\n\t * \r\n\t * @param {st.ngn.Sensor} sensor - Sensor object\r\n\t * \r\n\t */\r\n\t\"initialze_SensorEngine\" : function (sensor) {\r\n\t\t\r\n\t\tlet _sensorConfig = sensor.config;\r\n\t\tlet _options = _sensorConfig.options;\r\n\t\t\r\n\t\t\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ \\/ ~~~\r\n\t\t// Sensor Engine URL \r\n\t\tif (_options.sensorEngineURL !== undefined && \r\n\t\t\t\t_options.sensorEngineURL !== null) {\r\n\t\t\t\r\n\t\t\tsensor._sensorEngine = null;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tsensor._sensorEngine = require(_options.sensorEngineURL);\r\n\t\t\t\tsensor.sensorEngine = new sensor._sensorEngine(_sensorConfig);\r\n\t\t\t\tsensor.sensorEngine.initialize();\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t  console.log('<EEE> SensorEngine_Lib.initialze_SensorEngine');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\t  console.log(e);\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\t  console.log(sensor.config);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} \r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ /\\ ~~~\r\n\t\t\r\n\t\t\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ \\/ ~~~\r\n\t\t// Engine IRI (stIRI format) \r\n\t\t//\r\n\t\t// Try new methods for load engines\r\n\t\t// \r\n\t\tif (_options.engineURI !== undefined && \r\n\t\t\t\t_options.engineURI !== null && \r\n\t\t\t\tsensor.sensorEngine === null) {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet _BaseEngines_Lib = require('./baseEngines/stBaseNGN.js').BaseEngines_Lib;\r\n\t\t\t\r\n\t\t\t// console.log('<~i~> SensorEngine_Lib.initialze_SensorEngine');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t// console.log(sensor);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\t\r\n\t\t\t\tsensor.sensorEngine = _BaseEngines_Lib.initialize_Engine({\r\n\t\t\t\t\t'engineOptions': _options,\r\n\t\t\t\t\t'bngnOptions': _sensorConfig\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tsensor.sensorEngine.initialize();\r\n\r\n\t\t\t\t\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// TODO: handle exception\r\n\t\t\t\t\r\n\t\t\t\tconsole.log('<EEE> SensorEngine_Lib.initialze_SensorEngine');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\tconsole.log(' <~> _BaseEngines_Lib.initialize_Engine');\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t\tconsole.log(e);\t// TODO: REMOVE DEBUG LOG\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t// ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ - ~~~ _ ~~~ - ~~~ - ~~~ /\\ ~~~\r\n\t\t\r\n\t}\r\n\t\r\n};\r\n\r\n\r\n/**\r\n * Sensor Engine\r\n * \r\n * @class\r\n * @memberof st.ngn\r\n * \r\n * @property {object} config - Configuration.\r\n * @property {object} _mainLoop - Main loop reference object.\r\n * @property {String} state - State.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * \r\n * \r\n */\r\nclass SensorEngine {\r\n\t\r\n\t/**\r\n\t * @constructs SensorEngine\r\n\t * \r\n\t * @param {object} config Configuration object\r\n\t */\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tlet _snsEngine = this;\r\n\t\t\r\n\t\t_snsEngine.config = config;\r\n\t\t_snsEngine._mainLoop = null;\r\n\t\t\r\n\t\t_snsEngine.CONSTANTS = SensorEngine_CONSTANTS;\r\n\t\t_snsEngine.state = _snsEngine.CONSTANTS.States.Config;\r\n\t\t\r\n\t\t\r\n\t\t_snsEngine.eventEmitter = new EventEmitter();\r\n\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t */\r\n\tinitialize() {\r\n\t\t\r\n\t\tlet sensorEngine = this;\r\n\t\t\r\n\t\t// Map event MainLoop_Stop\r\n\t\tsensorEngine.eventEmitter.on( sensorEngine.CONSTANTS.Events.MainLoop_Stop, function() {\r\n\t\t\tclearInterval( sensorEngine._mainLoop );\r\n\t\t\tsensorEngine.state = sensorEngine.CONSTANTS.States.Ready;\r\n\t\t});\r\n\t\t\r\n\t\tsensorEngine.state = sensorEngine.CONSTANTS.States.Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Main loop\r\n\t */\r\n\tmainLoop() {\r\n\t\t\r\n\t  let sensorEngine = this;\r\n\t  \r\n\t  if ( sensorEngine.state !== sensorEngine.CONSTANTS.States.Ready ) {\r\n\t\t  throw \"Bad state\";\r\n\t  }\r\n\t  \r\n\t  sensorEngine.state = sensorEngine.CONSTANTS.States.Working;\r\n\t  \r\n\t  sensorEngine._mainLoop = setInterval(() => {\r\n\t\t  if (sensorEngine.state === sensorEngine.CONSTANTS.States.Working) {\r\n\t\t\t  \r\n\t\t\t  // Emit event MainLoop_Tick\r\n\t\t\t  sensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Tick);\r\n\t\t  } else {\r\n\t\t\t  \r\n\t\t\t  // Emit event MainLoop_Stop\r\n\t\t\t  sensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Stop);\r\n\t\t  }\r\n\t  }, sensorEngine.config.loopTime);\r\n\t  \r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop main loop\r\n\t * \r\n\t * @fires st.ngn.SensorEngine#MainLoop_Stop\r\n\t */\r\n\tstopMainLoop() {\r\n\t\tlet sensorEngine = this;\r\n\t\tsensorEngine.eventEmitter.emit(sensorEngine.CONSTANTS.Events.MainLoop_Stop);\t// Emit event MainLoop_Stop\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start engine\r\n\t * @abstract \r\n\t */\r\n\tstartEngine() {\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Stop engine\r\n\t * @abstract \r\n\t */\r\n\tstopEngine() {\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get options\r\n\t * @abstract \r\n\t * @return {object} Options object\r\n\t */\t\r\n\tgetOptions() {\r\n\t\treturn {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set options\r\n\t * @abstract \r\n\t * @param {object} options - Options object.\r\n\t */\t\r\n\tsetOptions(options) {\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\nlet _lib = {\r\n\t\"SensorEngine\" : SensorEngine,\r\n\t\"SensorEngine_Lib\" : SensorEngine_Lib\r\n\t\t\r\n};\r\n\r\n\r\nmodule.exports = _lib;\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}