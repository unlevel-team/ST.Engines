{"version":3,"sources":["stEngines/baseEngines/NGNInterface.js"],"names":[],"mappings":"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","file":"stEngines/baseEngines/NGNInterface.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Engines System\r\n * \r\n * SomeThings Engines System library\r\n */\r\n\r\n\r\n\r\n/**\r\n * Engine interface.\r\n * <pre>\r\n * Provides a simple interface for define an engine.\r\n * \r\n * Could be used in custom engines\r\n * \r\n * </pre>\r\n * \r\n * \r\n * @typedef {Object} EngineInterface\r\n * @memberof st.ngn.baseEngines\r\n * @type Object\r\n * \r\n * \r\n * @property {string} name - Engine name.\r\n * @property {string} type - Engine type. Could be 'sensor' or 'actuator'.\r\n * @property {string} baseNGN - BaseEngine. Could be 'SimpleLoop' or 'CounterLoop.\r\n * \r\n * @property {object} eventEmmiter - Object for receive and emit events.\r\n * \r\n * @property {function} getOptions - Get options function.\r\n * @property {function} setOptions - Set options function.\r\n * @property {function} startEngine - startEngine function.\r\n * @property {function} stopEngine - stopEngine function.\r\n * \r\n * \r\n * @property {object} custom_engine - The custom engine.\r\n * @property {st.ngn.baseEngines.CustomOption[]} [custom_options] - Custom options.\r\n * \r\n * @property {(st.ngn.SensorEngine|st.ngn.ActuatorEngine)} _engine - The ST engine.\r\n * \r\n * \r\n * @property {object} _baseEngine - Contains data related to base engine. (is loaded when the interface is used...)\r\n * \r\n */\r\n\r\n\r\n\r\n/** \r\n * Custom option\r\n * <pre>\r\n * Provides a simple interface for define a custom option.\r\n * \r\n * Could be used in custom engines\r\n * \r\n * </pre>\r\n * \r\n * @typedef {Object} CustomOption\r\n * @memberof st.ngn.baseEngines\r\n * @type Object\r\n * \r\n * @property {string} name - Property name.\r\n * @property {string} type - Property type. Could be 'number', 'boolean', 'string', 'object', 'array'.\r\n * @property {string} [alias] - An alias for this property.\r\n * @property {string} [description] - A description for this property.\r\n * \r\n */\r\n\r\n\r\n/**\r\n * BaseEngine CONSTANTS\r\n * \r\n * @memberof st.ngn.baseEngines\r\n */\r\nconst EngineInterface_CONSTANTS = {\r\n\t\r\n\t'EngineTypes': {\r\n\t\t'Sensor': 'sensor',\r\n\t\t'Actuator': 'actuator'\r\n\t}\r\n\t\t\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Interfaces Tools\r\n * @memberof st.ngn.baseEngines\r\n */\r\nlet ngnInterfaces_Tools = {\r\n\t\r\n\t\t\r\n\t/**\r\n\t * CheckInterface \r\n\t * @function\r\n\t * @memberof st.ngn.baseEngines.InterfacesTools\r\n\t */\r\n\t'checkInterface': function(options) {\r\n\t\t\r\n\t}\r\n\t\t\r\n};\r\n\r\n\r\n\r\nlet _ngnInterfaces_Lib = {\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t'_setupNGNfor_BaseEngines': function(options) {\r\n\t\t\r\n\t\tlet _ngnInterface = options.ngnInterface;\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _baseEngine = _engineItf._engine;\r\n\t\tlet _customEngine = _engineItf.custom_engine;\r\n\r\n\r\n\t\t_ngnInterface.eventEmitter.on(_baseEngine.CONSTANTS.Events.MainLoop_Tick, function(_data) {\r\n\t\t\t_customEngine.eventEmitter.emit(_baseEngine.CONSTANTS.Events.MainLoop_Tick, _data);\r\n\t\t});\r\n\r\n\t\t\r\n\t\t\r\n\t\tswitch (_engineItf.type) {\r\n\t\t\t\r\n\t\t\tcase _ngnInterface.CONSTANTS.EngineTypes.Sensor:\r\n\t\t\t\t\r\n\t\t\t\tlet _SensorNGN_Lib = require('../SensorEngine.js').SensorEngine_Lib;\r\n\t\t\t\t\r\n\t\t\t\t_engineItf._baseEngine = {\r\n\t\t\t\t\t'CONSTANTS': _SensorNGN_Lib.CONSTANTS\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase _ngnInterface.CONSTANTS.EngineTypes.Actuator:\r\n\t\t\t\t\r\n\t\t\t\tlet _ActuatorNGN_Lib = require('../ActuatorEngine.js').ActuatorEngine_Lib;\r\n\t\t\t\t\r\n\t\t\t\t_engineItf._baseEngine = {\r\n\t\t\t\t\t'CONSTANTS': _ActuatorNGN_Lib.CONSTANTS\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\t\r\n\t\t\r\n};\r\n\r\n\r\n\r\n/**\r\n * NGNInterface\r\n * \r\n * <pre>\r\n * NGN Interface\r\n * \r\n * This class manages an EngineInterface\r\n * \r\n * SomeThings Engines System library\r\n * </pre>  \r\n * \r\n * @class\r\n * @memberof st.ngn.baseEngines\r\n * \r\n * @property {st.ngn.baseEngines.EngineInterface} engineInterface - The engine interface\r\n * @property {string} name - name of this engine interface\r\n * @property {string} baseName - Base name, is the 'engineInterface.name' property\r\n * @property {object} eventEmitter - Object for emit events. Normally is the one used in the 'base engine' of the engine interface...\r\n * \r\n * @property {object} _config - Configuration object, is the 'options.config' parameter\r\n * @property {object} _bngnOptions - Configuration object, for base engine\r\n * \r\n */\r\nclass NGNInterface {\r\n\t\r\n\t\r\n\t/**\r\n\t * @constructs NGNInterface\r\n\t * \r\n\t * @param {object} options - Options object.\r\n\t * @param {st.ngn.baseEngines.EngineInterface} options.engineInterface - The engine interface.\r\n\t * @param {object} [options.bngnOptions] - Configuration object, for base engine\r\n\t * \r\n\t * \r\n\t */\r\n\tconstructor(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\t_ngnInterface.engineInterface = null;\r\n\t\t_ngnInterface.name = null;\r\n\t\t_ngnInterface.baseName = null;\r\n\t\t_ngnInterface.eventEmitter = null;\r\n\t\t_ngnInterface._config = null;\r\n\t\t_ngnInterface.CONSTANTS = EngineInterface_CONSTANTS;\r\n\t\t\r\n\t\t_ngnInterface._config = options.config;\r\n\t\t_ngnInterface._bngnOptions = options.bngnOptions;\r\n\t\t\r\n\t\t\r\n\t\tif (options.engineInterface === undefined) {\r\n\t\t\tthrow 'engineInterface is required.';\r\n\t\t}\r\n\t\t_ngnInterface.engineInterface = options.engineInterface;\r\n\t\t\r\n\t\t\r\n\t\t_ngnInterface._bngnOptions = {\r\n\t\t\t'loopTime': 500\r\n\t\t};\r\n\t\t\r\n\t\tif (options.bngnOptions !== undefined) {\r\n\t\t\t_ngnInterface._bngnOptions = options.bngnOptions;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\t\r\n\t\t_ngnInterface.baseName = _engineItf.name;\r\n\t\t_ngnInterface.name = _engineItf.name;\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Initializes the engine interface\r\n\t * <pre>\r\n\t * \r\n\t * </pre>\r\n\t */\r\n\tinitialize(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\tif (options.ngnInterface !== undefined) {\r\n\t\t\t_ngnInterface = options.ngnInterface;\r\n\t\t}\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _config = _ngnInterface._config;\r\n\t\t\r\n\r\n\t\t// console.log('<~i~> st.ngn.baseEngines.NGNInterface.initialize ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t// console.log(options);\t// TODO: REMOVE DEBUG LOG\r\n\t\t// console.log(_config);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\t// Check 'type' (really doesn't care...)\r\n\t\tswitch (_engineItf.type) {\r\n\r\n\t\t\tcase 'sensor':\r\n\t\t\t\t// let SensorEngine = require('../SensorEngine.js');\r\n\t\t\t\t// _engineItf._engine = new SensorEngine(_config);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase 'actuator':\r\n\t\t\t\t// let ActuatorEngine = require('../ActuatorEngine.js');\r\n\t\t\t\t// _engineItf._engine = new ActuatorEngine(_config);\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tthrow 'Bad engine type';\r\n\t\t\t\t// break;\r\n\t\t}\r\n\t\t\r\n\r\n\t\t// Set BaseEngine\r\n\t\tif (_engineItf.baseNGN === undefined) {\r\n\t\t\tthrow 'baseNGN is required.';\r\n\t\t}\r\n\t\tlet _baseNGN = _engineItf.baseNGN;\r\n\r\n\r\n\t\tlet _BaseEngines_Lib = require('./stBaseNGN.js').BaseEngines_Lib;\r\n\r\n\t\ttry {\r\n\t\t\t_engineItf._engine = _BaseEngines_Lib.get_BaseEngine({\r\n\t\t\t\t'name': _baseNGN,\r\n\t\t\t\t'ngnConfig': _ngnInterface._bngnOptions\r\n\t\t\t});\r\n\r\n\t\t\tlet _baseEngine = _engineItf._engine;\r\n\t\t\tlet _customEngine = _engineItf.custom_engine;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t_baseEngine.initialize({\r\n\t\t\t\t\t'engine': _baseEngine\r\n\t\t\t\t});\r\n\r\n\t\t\t\t_ngnInterface.eventEmitter = _baseEngine.eventEmitter;\r\n\t\t\t\t\r\n\t\t\t\t_ngnInterfaces_Lib._setupNGNfor_BaseEngines({\r\n\t\t\t\t\t'ngnInterface': _ngnInterface\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t} catch (_e) {\r\n\t\t\t\tthrow 'Cannot initialize base engine. ' + _e;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t_ngnInterface.CONSTANTS = _engineItf._engine.CONSTANTS;\r\n\r\n\t\t} catch (_e) {\r\n\t\t\tthrow 'Error in BaseEngine. ' + _e;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get options\r\n\t * \r\n\t * @returns {object} - Object with the engine options\r\n\t */\r\n\tgetOptions(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\tif (options.ngnInterface !== undefined) {\r\n\t\t\t_ngnInterface = options.ngnInterface;\r\n\t\t}\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _engine = _engineItf._engine;\r\n\r\n\t\t\r\n\t\t// console.log('<~i~> st.ngn.baseEngines.NGNInterface.getOptions ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t// console.log(_engineItf);\t// TODO: REMOVE DEBUG LOG\r\n\t\t\r\n\r\n\t\tlet _engineOptions = null;\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\t_engineOptions = _engineItf.getOptions({\r\n\t\t\t\t'ngnInterface': _engineItf\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet _baseEngineOptions = _engine.getOptions({\r\n\t\t\t\t'engine': _engine\r\n\t\t\t});\r\n\r\n\t\t\t_engineOptions._bngnOptions = _baseEngineOptions;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (_engineItf.custom_options !== undefined) {\r\n\t\t\t\t_engineOptions._customOptions = _engineItf.custom_options;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> st.ngn.baseEngines.NGNInterface.getOptions ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_e);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t    return _engineOptions;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set options\r\n\t * \r\n\t * \r\n\t */\r\n\tsetOptions(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\tif (options.ngnInterface !== undefined) {\r\n\t\t\t_ngnInterface = options.ngnInterface;\r\n\t\t}\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _engine = _engineItf._engine;\r\n\t\t\r\n\t\t// console.log('<~i~> st.ngn.baseEngines.NGNInterface.setOptions...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t// console.log(options);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\t_engineItf.setOptions({\r\n\t\t\t\t'ngnInterface': _engineItf,\r\n\t\t\t\t'ngnOptions': options.ngnOptions\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t_engine.setOptions({\r\n\t\t\t\t'engine': _engine,\r\n\t\t\t\t'ngnOptions': options.bngnOptions\r\n\t\t\t});\r\n\r\n\t\t\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> st.ngn.baseEngines.NGNInterface.setOptions...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_e);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Start engine\r\n\t * \r\n\t */\r\n\tstartEngine(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\tif (options.ngnInterface !== undefined) {\r\n\t\t\t_ngnInterface = options.ngnInterface;\r\n\t\t}\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _engine = _engineItf._engine;\r\n\t\t\r\n\t\tconsole.log('<~i~> st.ngn.baseEngines.NGNInterface.startEngine ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\tconsole.log(_engine);\t// TODO: REMOVE DEBUG LOG\r\n\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\t_engine.startEngine({\r\n\t\t\t\t'engine': _engine\r\n\t\t\t});\r\n\t\t\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\t\r\n\t\t\tconsole.log('<EEE> st.ngn.baseEngines.NGNInterface.startEngine ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_e);\t// TODO: REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop engine\r\n\t * \r\n\t * @returns Promise\r\n\t */\r\n\tstopEngine(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngnInterface = this;\r\n\t\tif (options.ngnInterface !== undefined) {\r\n\t\t\t_ngnInterface = options.ngnInterface;\r\n\t\t}\r\n\t\t\r\n\t\tlet _engineItf = _ngnInterface.engineInterface;\r\n\t\tlet _engine = _engineItf._engine;\r\n\t\t\r\n\t\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\t_engine.stopEngine({\r\n\t\t\t\t'engine': _engine\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (_e) {\r\n\t\t\t// TODO: handle exception\r\n\t\t\tconsole.log('<EEE> st.ngn.baseEngines.NGNInterface.stopEngine ...');\t// TODO: REMOVE DEBUG LOG\r\n\t\t\tconsole.log(_e);\t// TODO: REMOVE DEBUG LOG\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\nclass NGNInterfaceManager {\r\n\t\r\n\t/**\r\n\t * @constructs NGNInterfaceManager\r\n\t */\r\n\tconstructor(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\n\r\n\r\n\r\nlet _lib = {\r\n\t'NGNInterface': NGNInterface\r\n};\r\n\r\n\r\nmodule.exports = _lib;\r\n\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}