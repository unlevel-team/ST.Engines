{"version":3,"sources":["stEngines/baseEngines/BaseEngine.js"],"names":[],"mappings":"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","file":"stEngines/baseEngines/BaseEngine.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Base Engine\r\n * \r\n * Generic object for an engine\r\n * \r\n * \r\n * # SimpleLoop {loopTime}\r\n * # CounterLoop {loopTime, ticks, loopNum}\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Import EventEmitter\r\n * @ignore\r\n */\r\nlet EventEmitter = require('events').EventEmitter;\r\n\r\n\r\n\r\n/**\r\n * BaseEngine CONSTANTS\r\n * \r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n */\r\nconst BaseEngine_CONSTANTS = {\r\n\t\t\r\n\t\"States\" : {\r\n\t\t\"Config\" : \"config\",\r\n\t\t\"Ready\" : \"ready\",\r\n\t\t\"Working\" : \"working\",\r\n\t\t\"Stop\" : \"stop\"\r\n\t},\r\n\t\r\n\t\r\n\t\"Events\" : {\r\n\t\t\"MainLoop_Tick\" : \"Main Loop Tick\",\r\n\t\t\"MainLoop_Stop\" : \"Main Loop Stop\",\r\n\t\t\r\n\t\t\"Engine_Start\" : \"NGN start\",\r\n\t\t\"Engine_Stop\" : \"NGN stop\",\r\n\r\n\t\t\r\n\t\t\"EngineData\" : \"NGN Data\"\r\n\t\t\r\n\t}\r\n\t\t\r\n};\r\n\r\n\r\n\r\n/**\r\n * BaseEngine configuration object.\r\n * \r\n * @typedef {Object} Config\r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n * \r\n * @type Object\r\n * @property {number} loopTime - The time in miliseconds for main loop.\r\n * \r\n */\r\n\r\n\r\n\r\n/**\r\n * Engine_Start event.\r\n *\r\n * @event st.ngn.baseEngines.BaseEngine#Engine_Start\r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n * @type {object}\r\n * @property {st.ngn.BaseEngine} engine - The engine that is started.\r\n */\r\n\r\n/**\r\n * Engine_Stop event.\r\n *\r\n * @event st.ngn.baseEngines.BaseEngine#Engine_Stop\r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n * @type {object}\r\n * @property {st.ngn.BaseEngine} engine - The engine that is stopped.\r\n */\r\n\r\n/**\r\n * MainLoop_Tick event.\r\n *\r\n * @event st.ngn.baseEngines.BaseEngine#MainLoop_Tick\r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * MainLoop_Stop event.\r\n *\r\n * @event st.ngn.baseEngines.BaseEngine#MainLoop_Stop\r\n * @memberof st.ngn.baseEngines.BaseEngine\r\n * @type {object}\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Base Engine\r\n * <pre>\r\n * 'Base engines' are the most internal 'core pattern' of an engine\r\n * \r\n * Provides different states ('config', 'ready', 'working', 'stopped')\r\n * The simplest 'core pattern' is an infinite loop with some time interval (non-precise clock)...\r\n *  \r\n *  \r\n * </pre>\r\n * \r\n * @class\r\n * @memberof st.ngn.baseEngines\r\n * \r\n * @property {object} config - Configuration.\r\n * @property {object} _mainLoop - Main loop reference object.\r\n * @property {String} state - State.\r\n * @property {object} eventEmitter - Object for emit events.\r\n * \r\n * \r\n */\r\nclass BaseEngine {\r\n\t\r\n\t/**\r\n\t * @constructs BaseEngine\r\n\t * \r\n\t * @param {st.ngn.baseEngines.BaseEngine.Config} config Configuration object\r\n\t */\r\n\tconstructor(config) {\r\n\t\t\r\n\t\tlet _baseEngine = this;\r\n\t\t\r\n\t\t_baseEngine.config = config;\r\n\t\t_baseEngine._mainLoop = null;\r\n\t\t\r\n\t\t_baseEngine.CONSTANTS = BaseEngine_CONSTANTS;\r\n\t\t_baseEngine.state = _baseEngine.CONSTANTS.States.Config;\r\n\t\t\r\n\t\t\r\n\t\t_baseEngine.eventEmitter = new EventEmitter();\r\n\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize\r\n\t * <pre>\r\n\t * When an engine is initialized the state changes to 'ready'\r\n\t * </pre>\r\n\t * \r\n\t * @throws {Exception}\r\n\t * \r\n\t */\r\n\tinitialize(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _baseEngine = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_baseEngine = options.engine;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlet _config = _baseEngine.config;\r\n\t\tif (_config.loopTime === undefined) {\r\n\t\t\tthrow 'loopTime is required.';\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Map event MainLoop_Stop\r\n\t\t_baseEngine.eventEmitter.on( _baseEngine.CONSTANTS.Events.MainLoop_Stop, function() {\r\n\t\t\tclearInterval( _baseEngine._mainLoop );\r\n\t\t\t_baseEngine.state = _baseEngine.CONSTANTS.States.Ready;\r\n\t\t});\r\n\t\t\r\n\t\t_baseEngine.state = _baseEngine.CONSTANTS.States.Ready;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start main loop\r\n\t * <pre>\r\n\t * Starts engine 'main loop'.\r\n\t * \r\n\t * The engine state changes to 'working'...\r\n\t * ... and with 'loopTime' intervals fires 'MainLoop_Tick' event\r\n\t * </pre>\r\n\t * \r\n\t */\r\n\t_startMainLoop(options) {\r\n\t\t\r\n\t  if (options === undefined) {\r\n\t\t  options = {};\r\n\t  }\r\n\r\n\t  let _ngn = this;\r\n\t  if (options.engine !== undefined) {\r\n\t\t  _ngn = options.engine;\r\n\t  }\r\n\t  \r\n\t  let _config = _ngn.config;\r\n\r\n\t  \r\n\t  \r\n\t  if (_config.loopTime === undefined) {\r\n\t\t  throw \"Bad loopTime\";\r\n\t  }\r\n\t  \r\n\t  if ( _ngn.state !== _ngn.CONSTANTS.States.Ready ) {\r\n\t\t  throw \"Bad state\";\r\n\t  }\r\n\t  \r\n\t  _ngn.state = _ngn.CONSTANTS.States.Working;\r\n\t  \r\n\t  _ngn._mainLoop = setInterval(() => {\r\n\t\t  if (_ngn.state === _ngn.CONSTANTS.States.Working) {\r\n\t\t\t  \r\n\t\t\t  // Emit event MainLoop_Tick\r\n\t\t\t  _ngn.eventEmitter.emit(_ngn.CONSTANTS.Events.MainLoop_Tick);\r\n\t\t  } else {\r\n\t\t\t  \r\n\t\t\t  // Emit event MainLoop_Stop\r\n\t\t\t  _ngn.eventEmitter.emit(_ngn.CONSTANTS.Events.MainLoop_Stop);\r\n\t\t  }\r\n\t  }, _config.loopTime);\r\n\t  \r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop main loop\r\n\t * <pre>\r\n\t * Stops the engine 'main loop'.\r\n\t * \r\n\t * This asynchronous operation is done firing the event 'MainLoop_Stop'\r\n\t * \r\n\t * </pre>\r\n\t * \r\n\t */\r\n\t_stopMainLoop(options) {\r\n\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\tlet _ngn = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_ngn = options.engine;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// Emit event MainLoop_Stop\r\n\t\t_ngn.eventEmitter.emit(_ngn.CONSTANTS.Events.MainLoop_Stop);\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Start engine\r\n\t * <pre>\r\n\t * The engine could start the 'main loop' only when is 'ready' or 'stopped'.\r\n\t * \r\n\t * When the engine is started the event 'Engine_Start' is emited.\r\n\t * </pre>\r\n\t * \r\n\t * \r\n\t * @throws Exception\r\n\t * @fires st.ngn.baseEngines.BaseEngine#Engine_Start\r\n\t * \r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.baseEngines.BaseEngine} [options.engine] - Engine reference\r\n\t * \r\n\t */\r\n\tstartEngine(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngn = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_ngn = options.engine;\r\n\t\t}\r\n\t\t\r\n\t\t// Check engine state\r\n\t\tswitch (_ngn.state) {\r\n\t\t\tcase _ngn.CONSTANTS.States.Ready:\r\n\t\t\tcase _ngn.CONSTANTS.States.Stop:\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Bad engine state.\";\r\n\t\t\t\t// break;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\t_ngn._startMainLoop({\r\n\t\t\t\t'engine': _ngn\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tthrow 'Error in mainLoop. ' + e;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event 'Engine_Start'\r\n\t\t_ngn.eventEmitter.emit( _ngn.CONSTANTS.Events.Engine_Start );\r\n\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Stop engine\r\n\t * <pre>\r\n\t * The engine could stop the 'main loop' only when is 'working'.\r\n\t * \r\n\t * When the engine is stopped the event 'Engine_Stop' is emited.\r\n\t * </pre>\r\n\t * \r\n\t * @throws Exception\r\n\t * @fires st.ngn.baseEngines.BaseEngine#Engine_Stop\r\n\t * \r\n\t * @param {object} options - Options object\r\n\t * @param {st.ngn.baseEngines.BaseEngine} [options.engine] - Engine reference\r\n\t * \r\n\t * \r\n\t */\r\n\tstopEngine(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngn = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_ngn = options.engine;\r\n\t\t}\r\n\t\t\r\n\t\tif (_ngn.state !== _ngn.CONSTANTS.States.Working) {\r\n\t\t\tthrow \"Bad engine state.\";\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t_ngn._stopMainLoop({\r\n\t\t\t\t'engine': _ngn\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tthrow 'Error in stopMainLoop. ' + e;\r\n\t\t}\r\n\t\t\r\n\t\t// Emit event Engine_Stop \r\n\t\t// for MainLoop_Stop\r\n\t\t_ngn.eventEmitter.emit( _ngn.CONSTANTS.Events.Engine_Stop );\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get options\r\n\t * @abstract \r\n\t * @return {object} Options object\r\n\t */\t\r\n\tgetOptions() {\r\n\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngn = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_ngn = options.engine;\r\n\t\t}\r\n\t\t\r\n\t\tlet _config = _ngn.config;\r\n\r\n\t\tlet _options = {\r\n\t\t\t'loopTime': _config.loopTime\r\n\t\t};\r\n\r\n\t\treturn _options;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Set options\r\n\t * @abstract \r\n\t * @param {object} options - Options object.\r\n\t */\t\r\n\tsetOptions(options) {\r\n\t\t\r\n\t\tif (options === undefined) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tlet _ngn = this;\r\n\t\tif (options.engine !== undefined) {\r\n\t\t\t_ngn = options.engine;\r\n\t\t}\r\n\t\t\r\n\t\tlet _config = _ngn.config;\r\n\t\t\r\n\t\tif (options.loopTime !== undefined) {\r\n\t\t\t_config.loopTime = options.loopTime;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t\r\n}\r\n\r\n\r\n\r\nlet _lib = {\r\n\t\"BaseEngine\" : BaseEngine\r\n};\r\n\r\n\r\nmodule.exports = _lib;\r\n\r\n\r\n"],"sourceRoot":"C:\\Users\\Felipe\\Documents\\Work\\SomeThings\\dev\\NLVL_STEngines\\es6"}